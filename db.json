{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilla/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilla/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilla/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilla/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilla/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilla/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilla/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilla/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1629552862555},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1629552862549},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1629552862549},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1629552862549},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1629552862549},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1629552862549},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1629552862550},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1629552862552},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1629552862550},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1629552862551},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1629552862552},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1629552862552},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1629552862553},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1629552862553},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1629552862554},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1629552862553},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1629552862553},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1629552862553},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1629552862551},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1629552862553},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1629552862553},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1629552862554},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629552862554},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629552862554},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1629552862554},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1629552862550},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1629552862555},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1629552862558},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1629552862556},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1629552862556},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1629552862556},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1629552862556},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1629552862557},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1629552862557},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1629552862557},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1629552862557},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1629552862557},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1629552862555},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1629552862557},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1629552862557},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1629552862557},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1629552862558},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1629552862564},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1629552862561},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1629552862561},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1629552862564},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1629552862561},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1629552862562},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1629552862562},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1629552862562},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1629552862562},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1629552862562},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1629552862564},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1629552862564},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1629552862559},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1629552862559},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1629552862558},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1629552862559},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1629552862559},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1629552862560},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1629552862560},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1629552862561},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1629552862566},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1629552862566},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1629552862567},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1629552862567},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1629552862567},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1629552862567},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1629552862569},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1629552862568},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1629552862568},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1629552862564},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1629552862561},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1629552862561},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1629552862566},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1629552862566},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1629552862568},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1629552862560},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1629552862568},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1629552862569},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1629552862552},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1629552862569},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1629552862568},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1629552862566},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1629552862567},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629552862563},{"_id":"public/2021/08/21/hello-world/index.html","hash":"f8c6e6d9eb4b9bf16e14da3221eb2bcdad6f37eb","modified":1629554063563},{"_id":"public/archives/index.html","hash":"3a50934d93a9e272635594d51525102649575056","modified":1629625336496},{"_id":"public/archives/2021/index.html","hash":"2b842008ed867e8c85267c167632e2250c4180e0","modified":1629625336496},{"_id":"public/archives/2021/08/index.html","hash":"43bb0bc771b5ea5d9f37ab767b342b92f86da3da","modified":1629625336496},{"_id":"public/index.html","hash":"b0134dc1248be85180663b630958c93e92ea04ca","modified":1629625336496},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1629552969817},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1629552969817},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1629552969817},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1629552969817},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1629552969817},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1629552969817},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1629552969817},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1629552969817},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1629552969817},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1629552969817},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1629552969817},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1629552969817},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1629552969817},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1629552969817},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1629552969817},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1629552969817},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1629552969817},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1629552969817},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1629552969817},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1629552969817},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1629552969817},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1629552969817},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629552969817},{"_id":"themes/yilla/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1629553366214},{"_id":"themes/yilla/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1629553366207},{"_id":"themes/yilla/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1629553366207},{"_id":"themes/yilla/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1629553366208},{"_id":"themes/yilla/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1629553366207},{"_id":"themes/yilla/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1629553366208},{"_id":"themes/yilla/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1629553366208},{"_id":"themes/yilla/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1629553366209},{"_id":"themes/yilla/_config.yml","hash":"8741ea75dbd1fd5b05fd7ac374cbe18bf3132f1a","modified":1629556106503},{"_id":"themes/yilla/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1629553366216},{"_id":"themes/yilla/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1629553366233},{"_id":"themes/yilla/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1629553366209},{"_id":"themes/yilla/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1629553366209},{"_id":"themes/yilla/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1629553366209},{"_id":"themes/yilla/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1629553366209},{"_id":"themes/yilla/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1629553366210},{"_id":"themes/yilla/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1629553366210},{"_id":"themes/yilla/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1629553366210},{"_id":"themes/yilla/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1629553366215},{"_id":"themes/yilla/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1629553366215},{"_id":"themes/yilla/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1629553366215},{"_id":"themes/yilla/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1629553366215},{"_id":"themes/yilla/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629553366216},{"_id":"themes/yilla/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1629553366216},{"_id":"themes/yilla/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1629553366216},{"_id":"themes/yilla/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1629553366231},{"_id":"themes/yilla/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1629553366233},{"_id":"themes/yilla/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1629553366216},{"_id":"themes/yilla/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1629553366228},{"_id":"themes/yilla/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1629553366210},{"_id":"themes/yilla/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1629553366210},{"_id":"themes/yilla/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1629553366210},{"_id":"themes/yilla/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1629553366211},{"_id":"themes/yilla/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1629553366215},{"_id":"themes/yilla/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1629553366215},{"_id":"themes/yilla/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1629553366229},{"_id":"themes/yilla/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1629553366229},{"_id":"themes/yilla/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1629553366230},{"_id":"themes/yilla/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1629553366229},{"_id":"themes/yilla/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1629553366230},{"_id":"themes/yilla/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1629553366230},{"_id":"themes/yilla/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1629553366230},{"_id":"themes/yilla/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1629553366231},{"_id":"themes/yilla/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1629553366231},{"_id":"themes/yilla/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1629553366217},{"_id":"themes/yilla/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1629553366217},{"_id":"themes/yilla/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1629553366217},{"_id":"themes/yilla/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1629553366217},{"_id":"themes/yilla/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1629553366218},{"_id":"themes/yilla/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1629553366218},{"_id":"themes/yilla/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1629553366218},{"_id":"themes/yilla/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1629553366218},{"_id":"themes/yilla/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1629553366218},{"_id":"themes/yilla/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1629553366220},{"_id":"themes/yilla/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1629553366221},{"_id":"themes/yilla/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1629553366221},{"_id":"themes/yilla/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1629553366222},{"_id":"themes/yilla/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1629553366222},{"_id":"themes/yilla/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1629553366223},{"_id":"themes/yilla/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1629553366223},{"_id":"themes/yilla/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1629553366223},{"_id":"themes/yilla/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1629553366223},{"_id":"themes/yilla/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1629553366223},{"_id":"themes/yilla/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1629553366224},{"_id":"themes/yilla/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1629553366224},{"_id":"themes/yilla/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1629553366224},{"_id":"themes/yilla/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1629553366224},{"_id":"themes/yilla/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1629553366224},{"_id":"themes/yilla/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1629553366225},{"_id":"themes/yilla/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1629553366225},{"_id":"themes/yilla/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1629553366225},{"_id":"themes/yilla/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1629553366225},{"_id":"themes/yilla/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1629553366226},{"_id":"themes/yilla/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1629553366226},{"_id":"themes/yilla/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1629553366226},{"_id":"themes/yilla/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1629553366227},{"_id":"themes/yilla/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1629553366227},{"_id":"themes/yilla/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1629553366227},{"_id":"themes/yilla/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1629553366227},{"_id":"themes/yilla/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1629553366227},{"_id":"themes/yilla/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1629553366228},{"_id":"themes/yilla/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1629553366228},{"_id":"themes/yilla/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1629553366228},{"_id":"themes/yilla/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1629553366212},{"_id":"themes/yilla/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1629553366213},{"_id":"themes/yilla/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1629553366213},{"_id":"themes/yilla/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1629553366218},{"_id":"themes/yilla/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1629553366219},{"_id":"themes/yilla/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1629553366219},{"_id":"themes/yilla/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1629553366219},{"_id":"themes/yilla/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1629553366219},{"_id":"themes/yilla/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1629553366220},{"_id":"themes/yilla/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1629553366220},{"_id":"themes/yilla/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1629553366221},{"_id":"themes/yilla/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1629553366221},{"_id":"themes/yilla/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1629553366222},{"_id":"themes/yilla/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1629553366222},{"_id":"themes/yilla/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1629553366222},{"_id":"themes/yilla/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1629553366232},{"_id":"themes/yilla/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1629553366233},{"_id":"themes/yilla/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1629553366214},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1629554063563},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1629554063563},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1629554063563},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1629554063563},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1629554063563},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1629554063563},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1629554063563},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1629554063563},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1629554063563},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1629554063563},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1629554063563},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1629554063563},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1629554063563},{"_id":"source/_data/next.yml","hash":"ebbb120230d141b698ddc9c7829c8ce5157d3a69","modified":1629555962531},{"_id":"source/_posts/1-HBase源码分析-基本情况.md","hash":"a954441ce9c6882eee9426f337db8316941e2f86","modified":1629555929139},{"_id":"source/_posts/3-HBase源码分析-数据查询与Get.md","hash":"7ff6d94e93f3fb3a1317777e5a96633d0dc8e177","modified":1629555929140},{"_id":"source/_posts/2-HBase源码分析-目录结构.md","hash":"e5cb5920d49c78348ad54e9d825f807f09613213","modified":1629555929140},{"_id":"source/_posts/A-HBase概念.md","hash":"b8b27009a9f68c806489ef35215b7ab80d38c34f","modified":1629555929140},{"_id":"source/_posts/Java字节流与字符流.md","hash":"2429fa3695d0efc379ce3cc0be10e7b8a73bc4fb","modified":1629555929141},{"_id":"source/_posts/B-HBase架构与物理模型.md","hash":"0f3bd6c06af01979de8f0df62cb75e4b4bec2c2b","modified":1629555929140},{"_id":"source/_posts/Unicode与UTF-8.md","hash":"e9fb944f5b6cf60210f4a6f470ccf02699aba1ae","modified":1629555929141},{"_id":"source/_posts/分布式一致性.md","hash":"cf29bf5124faa944164d5b82056e3f66ef30d594","modified":1629555929141},{"_id":"source/_posts/分布式文件系统.md","hash":"8f09bfb37c0360586a6adf0c20ed1c06dd01b831","modified":1629555929142},{"_id":"source/_posts/并发与并行.md","hash":"a7e56212a565cac50a2a04305e6a3ca2df9d971a","modified":1629555929141},{"_id":"public/2021/08/21/2-HBase源码分析-目录结构/index.html","hash":"5f239d311dd01e9625a00179c458661242b46aef","modified":1629625336496},{"_id":"public/2018/01/22/分布式文件系统/index.html","hash":"41993248aacd03e0aa59d4fda749db18ae4bfced","modified":1629625336496},{"_id":"public/2017/10/31/3-HBase源码分析-数据查询与Get/index.html","hash":"2eed02bd4c3c250404fa9fb32732cb0b780a3e4c","modified":1629625336496},{"_id":"public/2017/10/28/1-HBase源码分析-基本情况/index.html","hash":"4eec83d977f1ab27fd74f28bdd19853de80b836c","modified":1629625336496},{"_id":"public/2017/10/25/Java字节流与字符流/index.html","hash":"56172e78cd02dd3896e89f2e11478be8e49750ef","modified":1629625336496},{"_id":"public/2017/10/24/A-HBase概念/index.html","hash":"53957e61ac689b91e6b9e40bcaf4a954767fd180","modified":1629625336496},{"_id":"public/2017/10/24/B-HBase架构与物理模型/index.html","hash":"e3f74dddc8f9eeaa8b9058879aa57d692c5ec580","modified":1629625336496},{"_id":"public/2017/10/24/并发与并行/index.html","hash":"570f612243670c1b430321af03c0dd4288fc3f39","modified":1629625336496},{"_id":"public/2017/10/21/Unicode与UTF-8/index.html","hash":"24e9a93c88e668c621a28e45fb4c6c27ae551e04","modified":1629625336496},{"_id":"public/archives/2017/index.html","hash":"c28fbc10fdbd16703d98e761c7092d912a6cf8e8","modified":1629625336496},{"_id":"public/archives/2017/10/index.html","hash":"7661953abd39fb87e5c159b4aefec97bf1ad1adf","modified":1629625336496},{"_id":"public/archives/2017/12/index.html","hash":"a6a046e079c4b6692541b1af02b66e9887b526f7","modified":1629625336496},{"_id":"public/archives/2018/index.html","hash":"004b4ced0e5d9db7dc99bf5a9b1e540f6e4062f9","modified":1629625336496},{"_id":"public/archives/2018/01/index.html","hash":"e2d1ef744269101833c83c21d417cf383ae0deeb","modified":1629625336496},{"_id":"public/tags/HBase/index.html","hash":"6280287c38c3445bcc4ab55e215c59ead3a7a238","modified":1629625336496},{"_id":"public/tags/Hbase源码分析系列/index.html","hash":"567f78121d18eaf43d7b7bf6778bb6818053ab2f","modified":1629625336496},{"_id":"public/tags/概念混淆/index.html","hash":"fe58872825c9b0235ee36da5492a47405edb1f84","modified":1629625336496},{"_id":"public/tags/编程基础/index.html","hash":"53c22099b0d97d8478839ffc15ee4074567b86a7","modified":1629625336496},{"_id":"public/tags/分布式/index.html","hash":"841a01946f4cfda6aee9de956df4b30a3cd0c2fe","modified":1629625336496},{"_id":"public/2017/12/25/分布式一致性/index.html","hash":"7f2bc97cf3df66327a19b156ccac3e6abd5d44c9","modified":1629625336496},{"_id":"themes/yilla/_config.backup.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1629553366209},{"_id":"public/content.json","hash":"db981aa9de5776d5945da027c46e1643b957b21e","modified":1629625336496},{"_id":"source/CNAME","hash":"149d677d69bf1e6a83785a074f6ec3aa22c0c804","modified":1629623505541},{"_id":"public/CNAME","hash":"149d677d69bf1e6a83785a074f6ec3aa22c0c804","modified":1629625549498}],"Category":[],"Data":[{"_id":"next","data":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}],"Page":[],"Post":[{"title":"2 - HBase源码分析-数据查询与Get","date":"2017-10-31T13:42:58.000Z","_content":"\n使用这种方法用于从hbase中获取单行数据：\n　　\n\n    Result get(Get get) throws IOException\n\n首先我们来看下Result的结构，\n　　\n\n    Result {\n       Cell[] cells;\n       Boolean exist;//if the query was just to check existence\n       ...\n    }\nResult用于存储Get或者Scan操作后返回的表的单行值，使用Result可以直接获取值或者各种Map结构（Key-Value对），例如：<!--more-->\n\n    /**\n    * Method for retrieving(检索) the row key that corresponds to\n    * the row from which this Result was created.\n    **/\n    public byte[] getRow(){\n        ...\n    }\n    \n    /**\n    * Map of qualifiers to values.\n    * form: <qualifier, value>\n    * 指定的列族内部的列与值的映射\n    **/\n    public NavigableMap<byte[], byte[]> getFamilyMap(byte [] family){\n        ...\n    }\n\n接着，我们简单看下Result内部最重要的Cell数组。Cell是HBase中最基本的存储单元，包含很多的信息，比如：row、column family、type、mvcc version等。其唯一性由：坐标四元素<行键、列族名、列限定符、时间戳>+type 共计5者组合而定。前四者大家都清楚，**type**是指（写）操作类型，比如“put”，“delete”，读操作则没有。\n\n    interface Cell{\n        byte[] getRowArray();\n        int getRowOffset();\n        int getRowLength();\n        ...\n    }\n另外几个不常见的信息，比如：\n**mvcc version**，多版本并发控制，其目的是在保证数据一致性的前提下，提供一种高并发的访问性能。\n**tag**，非必需的，可能一个cell中有很多tags。\n放一张Table-Cell的基本结构图（图片来自网络）\n\n![HBase Table结构图][1]\n\n单行获取数据时，每次RPC请求都会发送一个Get对象。因为Get对象初始化需要输入行键，因此可以理解为一个Get对象就代表一行数据，包含多个列族或者多个列的信息。\n\n    Get extends Query implements Row, Comparable<Row>{\n        /**\n        * create a Get operation for the specified row\n        * 如果没有其他操作设置，则默认为获取所有列数据的最新版本\n        **/\n        public Get(byte[] row) {...}\n    }\n\n当然，用户可以有很多种方式来筛选目标数据，精确地获取某个单元格的数据：\n\n    Get addFamily(byte[] family);//取得指定列族的数据\n    Get addColumn(byte[] column, byte[] qualifier);//取得指定那一列的数据\n    ...\n\n一个完整的单行数据获取过程：\n\n    Configuration conf = HBaseConfiguration.create();//参数配置\n    HTable table = new HTable(conf, \"test\");//初始化一个新的表引用\n    Get get = new Get(Bytes.toBytes(\"row1\"));//使用指定行键“row1”构建一个Get实例\n    get.addColumn(Bytes.toBytes(\"colfam1\"), Bytes.toBytes(\"qua1\"));//向Get实例中添加一个列的限定\n    Result rst = table.get(get);//从HBase中返回数据\n    byte[] val = result.getValue(Bytes.toBytes(\"colfam1\"), Bytes.toBytes(\"qua1\"));//从返回的结果中获取对应列的数据（默认获取最新版本）\n    System.out.println(\"value: \" + val);\n\n  [1]: http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%20Table%E7%BB%93%E6%9E%84%E5%9B%BE.jpg","source":"_posts/3-HBase源码分析-数据查询与Get.md","raw":"---\ntitle: 2 - HBase源码分析-数据查询与Get\ndate: 2017-10-31 21:42:58\ntags:\n    - HBase\n    - Hbase源码分析系列\n---\n\n使用这种方法用于从hbase中获取单行数据：\n　　\n\n    Result get(Get get) throws IOException\n\n首先我们来看下Result的结构，\n　　\n\n    Result {\n       Cell[] cells;\n       Boolean exist;//if the query was just to check existence\n       ...\n    }\nResult用于存储Get或者Scan操作后返回的表的单行值，使用Result可以直接获取值或者各种Map结构（Key-Value对），例如：<!--more-->\n\n    /**\n    * Method for retrieving(检索) the row key that corresponds to\n    * the row from which this Result was created.\n    **/\n    public byte[] getRow(){\n        ...\n    }\n    \n    /**\n    * Map of qualifiers to values.\n    * form: <qualifier, value>\n    * 指定的列族内部的列与值的映射\n    **/\n    public NavigableMap<byte[], byte[]> getFamilyMap(byte [] family){\n        ...\n    }\n\n接着，我们简单看下Result内部最重要的Cell数组。Cell是HBase中最基本的存储单元，包含很多的信息，比如：row、column family、type、mvcc version等。其唯一性由：坐标四元素<行键、列族名、列限定符、时间戳>+type 共计5者组合而定。前四者大家都清楚，**type**是指（写）操作类型，比如“put”，“delete”，读操作则没有。\n\n    interface Cell{\n        byte[] getRowArray();\n        int getRowOffset();\n        int getRowLength();\n        ...\n    }\n另外几个不常见的信息，比如：\n**mvcc version**，多版本并发控制，其目的是在保证数据一致性的前提下，提供一种高并发的访问性能。\n**tag**，非必需的，可能一个cell中有很多tags。\n放一张Table-Cell的基本结构图（图片来自网络）\n\n![HBase Table结构图][1]\n\n单行获取数据时，每次RPC请求都会发送一个Get对象。因为Get对象初始化需要输入行键，因此可以理解为一个Get对象就代表一行数据，包含多个列族或者多个列的信息。\n\n    Get extends Query implements Row, Comparable<Row>{\n        /**\n        * create a Get operation for the specified row\n        * 如果没有其他操作设置，则默认为获取所有列数据的最新版本\n        **/\n        public Get(byte[] row) {...}\n    }\n\n当然，用户可以有很多种方式来筛选目标数据，精确地获取某个单元格的数据：\n\n    Get addFamily(byte[] family);//取得指定列族的数据\n    Get addColumn(byte[] column, byte[] qualifier);//取得指定那一列的数据\n    ...\n\n一个完整的单行数据获取过程：\n\n    Configuration conf = HBaseConfiguration.create();//参数配置\n    HTable table = new HTable(conf, \"test\");//初始化一个新的表引用\n    Get get = new Get(Bytes.toBytes(\"row1\"));//使用指定行键“row1”构建一个Get实例\n    get.addColumn(Bytes.toBytes(\"colfam1\"), Bytes.toBytes(\"qua1\"));//向Get实例中添加一个列的限定\n    Result rst = table.get(get);//从HBase中返回数据\n    byte[] val = result.getValue(Bytes.toBytes(\"colfam1\"), Bytes.toBytes(\"qua1\"));//从返回的结果中获取对应列的数据（默认获取最新版本）\n    System.out.println(\"value: \" + val);\n\n  [1]: http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%20Table%E7%BB%93%E6%9E%84%E5%9B%BE.jpg","slug":"3-HBase源码分析-数据查询与Get","published":1,"updated":"2021-08-21T14:25:29.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5qp00002j4y16d05zdo","content":"<p>使用这种方法用于从hbase中获取单行数据：\n　　</p>\n<pre><code>Result get(Get get) throws IOException\n</code></pre>\n<p>首先我们来看下Result的结构，\n　　</p>\n<pre><code>Result &#123;\n   Cell[] cells;\n   Boolean exist;//if the query was just to check existence\n   ...\n&#125;\n</code></pre>\n<p>Result用于存储Get或者Scan操作后返回的表的单行值，使用Result可以直接获取值或者各种Map结构（Key-Value对），例如：<span id=\"more\"></span></p>\n<pre><code>/**\n* Method for retrieving(检索) the row key that corresponds to\n* the row from which this Result was created.\n**/\npublic byte[] getRow()&#123;\n    ...\n&#125;\n\n/**\n* Map of qualifiers to values.\n* form: &lt;qualifier, value&gt;\n* 指定的列族内部的列与值的映射\n**/\npublic NavigableMap&lt;byte[], byte[]&gt; getFamilyMap(byte [] family)&#123;\n    ...\n&#125;\n</code></pre>\n<p>接着，我们简单看下Result内部最重要的Cell数组。Cell是HBase中最基本的存储单元，包含很多的信息，比如：row、column family、type、mvcc version等。其唯一性由：坐标四元素&lt;行键、列族名、列限定符、时间戳&gt;+type 共计5者组合而定。前四者大家都清楚，<strong>type</strong>是指（写）操作类型，比如“put”，“delete”，读操作则没有。</p>\n<pre><code>interface Cell&#123;\n    byte[] getRowArray();\n    int getRowOffset();\n    int getRowLength();\n    ...\n&#125;\n</code></pre>\n<p>另外几个不常见的信息，比如：<br><strong>mvcc version</strong>，多版本并发控制，其目的是在保证数据一致性的前提下，提供一种高并发的访问性能。<br><strong>tag</strong>，非必需的，可能一个cell中有很多tags。<br>放一张Table-Cell的基本结构图（图片来自网络）</p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%20Table%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"HBase Table结构图\"></p>\n<p>单行获取数据时，每次RPC请求都会发送一个Get对象。因为Get对象初始化需要输入行键，因此可以理解为一个Get对象就代表一行数据，包含多个列族或者多个列的信息。</p>\n<pre><code>Get extends Query implements Row, Comparable&lt;Row&gt;&#123;\n    /**\n    * create a Get operation for the specified row\n    * 如果没有其他操作设置，则默认为获取所有列数据的最新版本\n    **/\n    public Get(byte[] row) &#123;...&#125;\n&#125;\n</code></pre>\n<p>当然，用户可以有很多种方式来筛选目标数据，精确地获取某个单元格的数据：</p>\n<pre><code>Get addFamily(byte[] family);//取得指定列族的数据\nGet addColumn(byte[] column, byte[] qualifier);//取得指定那一列的数据\n...\n</code></pre>\n<p>一个完整的单行数据获取过程：</p>\n<pre><code>Configuration conf = HBaseConfiguration.create();//参数配置\nHTable table = new HTable(conf, &quot;test&quot;);//初始化一个新的表引用\nGet get = new Get(Bytes.toBytes(&quot;row1&quot;));//使用指定行键“row1”构建一个Get实例\nget.addColumn(Bytes.toBytes(&quot;colfam1&quot;), Bytes.toBytes(&quot;qua1&quot;));//向Get实例中添加一个列的限定\nResult rst = table.get(get);//从HBase中返回数据\nbyte[] val = result.getValue(Bytes.toBytes(&quot;colfam1&quot;), Bytes.toBytes(&quot;qua1&quot;));//从返回的结果中获取对应列的数据（默认获取最新版本）\nSystem.out.println(&quot;value: &quot; + val);\n</code></pre>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>使用这种方法用于从hbase中获取单行数据：\n　　</p>\n<pre><code>Result get(Get get) throws IOException\n</code></pre>\n<p>首先我们来看下Result的结构，\n　　</p>\n<pre><code>Result &#123;\n   Cell[] cells;\n   Boolean exist;//if the query was just to check existence\n   ...\n&#125;\n</code></pre>\n<p>Result用于存储Get或者Scan操作后返回的表的单行值，使用Result可以直接获取值或者各种Map结构（Key-Value对），例如：","more":"</p>\n<pre><code>/**\n* Method for retrieving(检索) the row key that corresponds to\n* the row from which this Result was created.\n**/\npublic byte[] getRow()&#123;\n    ...\n&#125;\n\n/**\n* Map of qualifiers to values.\n* form: &lt;qualifier, value&gt;\n* 指定的列族内部的列与值的映射\n**/\npublic NavigableMap&lt;byte[], byte[]&gt; getFamilyMap(byte [] family)&#123;\n    ...\n&#125;\n</code></pre>\n<p>接着，我们简单看下Result内部最重要的Cell数组。Cell是HBase中最基本的存储单元，包含很多的信息，比如：row、column family、type、mvcc version等。其唯一性由：坐标四元素&lt;行键、列族名、列限定符、时间戳&gt;+type 共计5者组合而定。前四者大家都清楚，<strong>type</strong>是指（写）操作类型，比如“put”，“delete”，读操作则没有。</p>\n<pre><code>interface Cell&#123;\n    byte[] getRowArray();\n    int getRowOffset();\n    int getRowLength();\n    ...\n&#125;\n</code></pre>\n<p>另外几个不常见的信息，比如：<br><strong>mvcc version</strong>，多版本并发控制，其目的是在保证数据一致性的前提下，提供一种高并发的访问性能。<br><strong>tag</strong>，非必需的，可能一个cell中有很多tags。<br>放一张Table-Cell的基本结构图（图片来自网络）</p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%20Table%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"HBase Table结构图\"></p>\n<p>单行获取数据时，每次RPC请求都会发送一个Get对象。因为Get对象初始化需要输入行键，因此可以理解为一个Get对象就代表一行数据，包含多个列族或者多个列的信息。</p>\n<pre><code>Get extends Query implements Row, Comparable&lt;Row&gt;&#123;\n    /**\n    * create a Get operation for the specified row\n    * 如果没有其他操作设置，则默认为获取所有列数据的最新版本\n    **/\n    public Get(byte[] row) &#123;...&#125;\n&#125;\n</code></pre>\n<p>当然，用户可以有很多种方式来筛选目标数据，精确地获取某个单元格的数据：</p>\n<pre><code>Get addFamily(byte[] family);//取得指定列族的数据\nGet addColumn(byte[] column, byte[] qualifier);//取得指定那一列的数据\n...\n</code></pre>\n<p>一个完整的单行数据获取过程：</p>\n<pre><code>Configuration conf = HBaseConfiguration.create();//参数配置\nHTable table = new HTable(conf, &quot;test&quot;);//初始化一个新的表引用\nGet get = new Get(Bytes.toBytes(&quot;row1&quot;));//使用指定行键“row1”构建一个Get实例\nget.addColumn(Bytes.toBytes(&quot;colfam1&quot;), Bytes.toBytes(&quot;qua1&quot;));//向Get实例中添加一个列的限定\nResult rst = table.get(get);//从HBase中返回数据\nbyte[] val = result.getValue(Bytes.toBytes(&quot;colfam1&quot;), Bytes.toBytes(&quot;qua1&quot;));//从返回的结果中获取对应列的数据（默认获取最新版本）\nSystem.out.println(&quot;value: &quot; + val);\n</code></pre>"},{"_content":"hbase-client：","source":"_posts/2-HBase源码分析-目录结构.md","raw":"hbase-client：","slug":"2-HBase源码分析-目录结构","published":1,"date":"2021-08-21T14:25:29.140Z","updated":"2021-08-21T14:25:29.140Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5qx00012j4y66nlgf51","content":"<p>hbase-client：</p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"","more":"<p>hbase-client：</p>\n"},{"title":"A - HBase概念","date":"2017-10-24T11:24:06.000Z","_content":"HBase是一个典型的NoSQL（Not Only SQL）数据库，主要用于存储半结构化和非结构化的松散数据（因为在HBase中，为空的列是不占用存储空间的）。HBase的单表可以有百亿行，百万列，且其依靠横向扩展（增加服务器）来增加计算和存储能力，弹性扩展（可以在不停止现有服务的前提下，随时添加或者减少节点）。<!--more-->\n\n\n1)、HBase是一种列式存储的分布式数据库。什么叫列式存储？\n\n> 传统的行式数据库按行读取，在没有建立索引的情况下，每次获取一行或者多行的数据时，即使选择只涉及某几列，也会读取所有列数据。如果处理查询时需要用到大部分的数据列，像OLTP（OnlineTransaction Processing，联机事务处理），如银行交易等，适合采用这种方式。\n而OLAP（Online Analytical Processing，联机分析处理），如统计报表等，涉及大量查询或批量DML操作（几百万甚至几十亿个数据行），且操作往往只关心少数几个数据列时，列式数据库将会发挥作用，效率要好于行数据库。列式数据库通过将同一个数据列的各个值存放在一起，使得在查询少数几个字段时，能大大减少读取的数据量。\nHBase是一种列式数据库，物理存储上，HBase的表是按列分开存储的。且为了提高读取效率，可以在HBase中将多个经常访问的数据列的值存放在一起，形成一个列族（Column Family）。一个列族的数据存放在一个或多个HFile中，且一个列族的数据会被同一个Region管理。\n\n2)、HBase是无模式的数据库。与传统定义模式的RDBMS数据库有什么区别？\n\n> [a] HBase的模式结构包括表、RowKey（行键），ColumnFamily（列族）、Qualifier（列），TimeStamp（时间版本）。在表确定的情况下，<行键>可以确定一行数据，<行键、列族、列>三个维度可以确定一个单元格数据，加上时间版本，则可以确定某一个具体的数据。\n[b] HBase是无模式数据库，因为其在创建表时不需要像传统的关系型数据库那样，要提前定义好列名、类型等元数据，只需要提前定义列族（至少指定一个列族）。后期写入数据时，可随时增加列，当然也可以增加列族。\n[c] HBase支持行级事务，0.94版本后，可以支持将多个PUT/DELETE在同一个事务中一起原子性执行，但是这些操作也得是针对某一行的。不同行，不同表间的一些列操作是无法放在一个事务中的。\n\n3)、HBase使用场景？\n> [a] 对于那些数据结构字段无法确定或者杂乱无章的，很适合采用HBase。因为其可以根据需要动态增加，且空列不占空间；\n[b] 对于超大数据量的存储，HBase也很适合。不用考虑读写分离、分表、分库，我们只需要增加机器，HBase会自动做水平切分扩展。且与HDFS、MapReduce集合，保证数据存储的可靠性和数据分析的高性能；\n","source":"_posts/A-HBase概念.md","raw":"---\ntitle: A - HBase概念\ndate: 2017-10-24 19:24:06\ntags:\n\t- HBase\n---\nHBase是一个典型的NoSQL（Not Only SQL）数据库，主要用于存储半结构化和非结构化的松散数据（因为在HBase中，为空的列是不占用存储空间的）。HBase的单表可以有百亿行，百万列，且其依靠横向扩展（增加服务器）来增加计算和存储能力，弹性扩展（可以在不停止现有服务的前提下，随时添加或者减少节点）。<!--more-->\n\n\n1)、HBase是一种列式存储的分布式数据库。什么叫列式存储？\n\n> 传统的行式数据库按行读取，在没有建立索引的情况下，每次获取一行或者多行的数据时，即使选择只涉及某几列，也会读取所有列数据。如果处理查询时需要用到大部分的数据列，像OLTP（OnlineTransaction Processing，联机事务处理），如银行交易等，适合采用这种方式。\n而OLAP（Online Analytical Processing，联机分析处理），如统计报表等，涉及大量查询或批量DML操作（几百万甚至几十亿个数据行），且操作往往只关心少数几个数据列时，列式数据库将会发挥作用，效率要好于行数据库。列式数据库通过将同一个数据列的各个值存放在一起，使得在查询少数几个字段时，能大大减少读取的数据量。\nHBase是一种列式数据库，物理存储上，HBase的表是按列分开存储的。且为了提高读取效率，可以在HBase中将多个经常访问的数据列的值存放在一起，形成一个列族（Column Family）。一个列族的数据存放在一个或多个HFile中，且一个列族的数据会被同一个Region管理。\n\n2)、HBase是无模式的数据库。与传统定义模式的RDBMS数据库有什么区别？\n\n> [a] HBase的模式结构包括表、RowKey（行键），ColumnFamily（列族）、Qualifier（列），TimeStamp（时间版本）。在表确定的情况下，<行键>可以确定一行数据，<行键、列族、列>三个维度可以确定一个单元格数据，加上时间版本，则可以确定某一个具体的数据。\n[b] HBase是无模式数据库，因为其在创建表时不需要像传统的关系型数据库那样，要提前定义好列名、类型等元数据，只需要提前定义列族（至少指定一个列族）。后期写入数据时，可随时增加列，当然也可以增加列族。\n[c] HBase支持行级事务，0.94版本后，可以支持将多个PUT/DELETE在同一个事务中一起原子性执行，但是这些操作也得是针对某一行的。不同行，不同表间的一些列操作是无法放在一个事务中的。\n\n3)、HBase使用场景？\n> [a] 对于那些数据结构字段无法确定或者杂乱无章的，很适合采用HBase。因为其可以根据需要动态增加，且空列不占空间；\n[b] 对于超大数据量的存储，HBase也很适合。不用考虑读写分离、分表、分库，我们只需要增加机器，HBase会自动做水平切分扩展。且与HDFS、MapReduce集合，保证数据存储的可靠性和数据分析的高性能；\n","slug":"A-HBase概念","published":1,"updated":"2021-08-21T14:25:29.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r100032j4y6b7m7lgi","content":"<p>HBase是一个典型的NoSQL（Not Only SQL）数据库，主要用于存储半结构化和非结构化的松散数据（因为在HBase中，为空的列是不占用存储空间的）。HBase的单表可以有百亿行，百万列，且其依靠横向扩展（增加服务器）来增加计算和存储能力，弹性扩展（可以在不停止现有服务的前提下，随时添加或者减少节点）。<span id=\"more\"></span></p>\n<p>1)、HBase是一种列式存储的分布式数据库。什么叫列式存储？</p>\n<blockquote>\n<p>传统的行式数据库按行读取，在没有建立索引的情况下，每次获取一行或者多行的数据时，即使选择只涉及某几列，也会读取所有列数据。如果处理查询时需要用到大部分的数据列，像OLTP（OnlineTransaction Processing，联机事务处理），如银行交易等，适合采用这种方式。<br>而OLAP（Online Analytical Processing，联机分析处理），如统计报表等，涉及大量查询或批量DML操作（几百万甚至几十亿个数据行），且操作往往只关心少数几个数据列时，列式数据库将会发挥作用，效率要好于行数据库。列式数据库通过将同一个数据列的各个值存放在一起，使得在查询少数几个字段时，能大大减少读取的数据量。<br>HBase是一种列式数据库，物理存储上，HBase的表是按列分开存储的。且为了提高读取效率，可以在HBase中将多个经常访问的数据列的值存放在一起，形成一个列族（Column Family）。一个列族的数据存放在一个或多个HFile中，且一个列族的数据会被同一个Region管理。</p>\n</blockquote>\n<p>2)、HBase是无模式的数据库。与传统定义模式的RDBMS数据库有什么区别？</p>\n<blockquote>\n<p>[a] HBase的模式结构包括表、RowKey（行键），ColumnFamily（列族）、Qualifier（列），TimeStamp（时间版本）。在表确定的情况下，&lt;行键&gt;可以确定一行数据，&lt;行键、列族、列&gt;三个维度可以确定一个单元格数据，加上时间版本，则可以确定某一个具体的数据。<br>[b] HBase是无模式数据库，因为其在创建表时不需要像传统的关系型数据库那样，要提前定义好列名、类型等元数据，只需要提前定义列族（至少指定一个列族）。后期写入数据时，可随时增加列，当然也可以增加列族。<br>[c] HBase支持行级事务，0.94版本后，可以支持将多个PUT/DELETE在同一个事务中一起原子性执行，但是这些操作也得是针对某一行的。不同行，不同表间的一些列操作是无法放在一个事务中的。</p>\n</blockquote>\n<p>3)、HBase使用场景？</p>\n<blockquote>\n<p>[a] 对于那些数据结构字段无法确定或者杂乱无章的，很适合采用HBase。因为其可以根据需要动态增加，且空列不占空间；<br>[b] 对于超大数据量的存储，HBase也很适合。不用考虑读写分离、分表、分库，我们只需要增加机器，HBase会自动做水平切分扩展。且与HDFS、MapReduce集合，保证数据存储的可靠性和数据分析的高性能；</p>\n</blockquote>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>HBase是一个典型的NoSQL（Not Only SQL）数据库，主要用于存储半结构化和非结构化的松散数据（因为在HBase中，为空的列是不占用存储空间的）。HBase的单表可以有百亿行，百万列，且其依靠横向扩展（增加服务器）来增加计算和存储能力，弹性扩展（可以在不停止现有服务的前提下，随时添加或者减少节点）。","more":"</p>\n<p>1)、HBase是一种列式存储的分布式数据库。什么叫列式存储？</p>\n<blockquote>\n<p>传统的行式数据库按行读取，在没有建立索引的情况下，每次获取一行或者多行的数据时，即使选择只涉及某几列，也会读取所有列数据。如果处理查询时需要用到大部分的数据列，像OLTP（OnlineTransaction Processing，联机事务处理），如银行交易等，适合采用这种方式。<br>而OLAP（Online Analytical Processing，联机分析处理），如统计报表等，涉及大量查询或批量DML操作（几百万甚至几十亿个数据行），且操作往往只关心少数几个数据列时，列式数据库将会发挥作用，效率要好于行数据库。列式数据库通过将同一个数据列的各个值存放在一起，使得在查询少数几个字段时，能大大减少读取的数据量。<br>HBase是一种列式数据库，物理存储上，HBase的表是按列分开存储的。且为了提高读取效率，可以在HBase中将多个经常访问的数据列的值存放在一起，形成一个列族（Column Family）。一个列族的数据存放在一个或多个HFile中，且一个列族的数据会被同一个Region管理。</p>\n</blockquote>\n<p>2)、HBase是无模式的数据库。与传统定义模式的RDBMS数据库有什么区别？</p>\n<blockquote>\n<p>[a] HBase的模式结构包括表、RowKey（行键），ColumnFamily（列族）、Qualifier（列），TimeStamp（时间版本）。在表确定的情况下，&lt;行键&gt;可以确定一行数据，&lt;行键、列族、列&gt;三个维度可以确定一个单元格数据，加上时间版本，则可以确定某一个具体的数据。<br>[b] HBase是无模式数据库，因为其在创建表时不需要像传统的关系型数据库那样，要提前定义好列名、类型等元数据，只需要提前定义列族（至少指定一个列族）。后期写入数据时，可随时增加列，当然也可以增加列族。<br>[c] HBase支持行级事务，0.94版本后，可以支持将多个PUT/DELETE在同一个事务中一起原子性执行，但是这些操作也得是针对某一行的。不同行，不同表间的一些列操作是无法放在一个事务中的。</p>\n</blockquote>\n<p>3)、HBase使用场景？</p>\n<blockquote>\n<p>[a] 对于那些数据结构字段无法确定或者杂乱无章的，很适合采用HBase。因为其可以根据需要动态增加，且空列不占空间；<br>[b] 对于超大数据量的存储，HBase也很适合。不用考虑读写分离、分表、分库，我们只需要增加机器，HBase会自动做水平切分扩展。且与HDFS、MapReduce集合，保证数据存储的可靠性和数据分析的高性能；</p>\n</blockquote>"},{"title":"B - HBase架构与物理模型","date":"2017-10-24T11:24:06.000Z","_content":"HBase可在大规模廉价的PC机器上搭建集群，其利用Hadoop的HDFS作为底层文件存储系统，利用MapReduce进行海量数据的分析，并使用ZooKeeper作为协同服务。<!--more-->\n\n![HBase架构图][1]\n\n1、HBase整体架构\n\nClient：客户端，是HBase的入口，使用HBase的RPC机制与HMaster和HRegionServer进行通信。与HMaster进行通信，负责管理类的操作；与HRegionServer进行通信，负责数据读写类操作。\n\nZooKeeper：分布式应用程序协调服务组件，负责管理多个HMaster的选举、存储HBase元数据信息（HMaster启动时将系统表-ROOT-加载到zk）、实时监控HRegionServer状态信息、存储所有Region的寻址入口等。\n\nHMaster：主节点，可以在启动HBase时设置为“启动多个”，但会通过选举机制保证只有一个用于提供服务。其主要负责管理Table的CRUD操作，管理RegionServer的负载均衡，Region的重分配及迁移等。\n\nHRegionServer：主要负责用户的I/O请求，向HDFS（Hadoop的分布式文件系统）中读写数据（HBase底层数据存储依靠于HDFS）。其包含一个HLog（实现Write ahead log，用户每次写入操作前，会写一份数据到HLog文件中）和多个HRegion。当前，每个HRegionServer可以管理大约100~1000个HRegion，每个HRegion大小为1~20GB。\n\nHRegion：存储的是实际数据，由一个或者多个HStore组成。每个table最开始只有一个HRegion，随着HRegion不断增大，当增大到一个阈值时，分割为两个新的HRegion。最后一个table会按行分割为多个HRegion，每个HRegion分散在不同的HregionServer中。HRegion是分布式存储和负载的最小单元（注意，不是存储的最小单元），即一个HRegion不会拆分到多个Server上。\n\nHStore：每个HStore保存了Table中的一个ColumnFamily（列族，即将经常同时访问的字段放在一起）的存储。每个HStore包含了一个MemStore和至少一个StoreFile。MemStore是Sorted Memory Buffer，用户写入数据时会首先放入MemStore中，当它满了以后，会缓冲（flush）成一个StoreFile。\n\nStoreFile：包含一个或者多个HFile，存在着Compact（合并）与Split（分裂）操作。\n\nHFile：结构分为6部分，主要包括，\n> [a] Data Block: 存储表中的数据，该部分数据可以被压缩。Data block是由多个block组成，每个block的组成形式为“块头+key长度+value长度+key+value”。块的大小可以设置，默认是64KB。如果设置较大，利于scan；设置较小，利于随机查询。\n[b] Meta Block（optional）：元数据块，用于保存元数据是kv类型的值。（注意，该数据块中只保存value值，key的值保存在第五项）。\n[c] FileInfo：HFile的元信息，保存的数据是以key值排序的kv类型的值。\n[d] DataIndex：Data block的索引，保存的是每个数据块在HFile中的位置、大小以及每个块的第一条key，即被索引的block中第一条记录的key。\n[e] MetaBlock Index：Meta block的索引，保存的是每个元数据在HFile中的位置、大小及每个元数据的key值。\n[f] Trailer Block：保存了HFile的一些基本信息，比如FileInfo的偏移、DataIndex块的个数等。\n\n2、HBase表物理模型\n\n![HBase表物理模型][2]\n\nHBase表的特征之一：多维有序映射。\n\n> RowKey -> 某一行数据;\nFamily -> 某行数据中的某个列族；\nQualifier -> 某行数据中某个列族的某一列；\nTimestamp -> 某行数据中某个列族的某一列（单元格数据）的某一个版本\n\n\n\n  [1]: http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%E6%9E%B6%E6%9E%84%E5%9B%BE.png\n  [2]: http://oybpgm6jn.bkt.clouddn.com/HBase%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.jpg","source":"_posts/B-HBase架构与物理模型.md","raw":"---\ntitle: B - HBase架构与物理模型\ndate: 2017-10-24 19:24:06\ntags:\n\t- HBase\n---\nHBase可在大规模廉价的PC机器上搭建集群，其利用Hadoop的HDFS作为底层文件存储系统，利用MapReduce进行海量数据的分析，并使用ZooKeeper作为协同服务。<!--more-->\n\n![HBase架构图][1]\n\n1、HBase整体架构\n\nClient：客户端，是HBase的入口，使用HBase的RPC机制与HMaster和HRegionServer进行通信。与HMaster进行通信，负责管理类的操作；与HRegionServer进行通信，负责数据读写类操作。\n\nZooKeeper：分布式应用程序协调服务组件，负责管理多个HMaster的选举、存储HBase元数据信息（HMaster启动时将系统表-ROOT-加载到zk）、实时监控HRegionServer状态信息、存储所有Region的寻址入口等。\n\nHMaster：主节点，可以在启动HBase时设置为“启动多个”，但会通过选举机制保证只有一个用于提供服务。其主要负责管理Table的CRUD操作，管理RegionServer的负载均衡，Region的重分配及迁移等。\n\nHRegionServer：主要负责用户的I/O请求，向HDFS（Hadoop的分布式文件系统）中读写数据（HBase底层数据存储依靠于HDFS）。其包含一个HLog（实现Write ahead log，用户每次写入操作前，会写一份数据到HLog文件中）和多个HRegion。当前，每个HRegionServer可以管理大约100~1000个HRegion，每个HRegion大小为1~20GB。\n\nHRegion：存储的是实际数据，由一个或者多个HStore组成。每个table最开始只有一个HRegion，随着HRegion不断增大，当增大到一个阈值时，分割为两个新的HRegion。最后一个table会按行分割为多个HRegion，每个HRegion分散在不同的HregionServer中。HRegion是分布式存储和负载的最小单元（注意，不是存储的最小单元），即一个HRegion不会拆分到多个Server上。\n\nHStore：每个HStore保存了Table中的一个ColumnFamily（列族，即将经常同时访问的字段放在一起）的存储。每个HStore包含了一个MemStore和至少一个StoreFile。MemStore是Sorted Memory Buffer，用户写入数据时会首先放入MemStore中，当它满了以后，会缓冲（flush）成一个StoreFile。\n\nStoreFile：包含一个或者多个HFile，存在着Compact（合并）与Split（分裂）操作。\n\nHFile：结构分为6部分，主要包括，\n> [a] Data Block: 存储表中的数据，该部分数据可以被压缩。Data block是由多个block组成，每个block的组成形式为“块头+key长度+value长度+key+value”。块的大小可以设置，默认是64KB。如果设置较大，利于scan；设置较小，利于随机查询。\n[b] Meta Block（optional）：元数据块，用于保存元数据是kv类型的值。（注意，该数据块中只保存value值，key的值保存在第五项）。\n[c] FileInfo：HFile的元信息，保存的数据是以key值排序的kv类型的值。\n[d] DataIndex：Data block的索引，保存的是每个数据块在HFile中的位置、大小以及每个块的第一条key，即被索引的block中第一条记录的key。\n[e] MetaBlock Index：Meta block的索引，保存的是每个元数据在HFile中的位置、大小及每个元数据的key值。\n[f] Trailer Block：保存了HFile的一些基本信息，比如FileInfo的偏移、DataIndex块的个数等。\n\n2、HBase表物理模型\n\n![HBase表物理模型][2]\n\nHBase表的特征之一：多维有序映射。\n\n> RowKey -> 某一行数据;\nFamily -> 某行数据中的某个列族；\nQualifier -> 某行数据中某个列族的某一列；\nTimestamp -> 某行数据中某个列族的某一列（单元格数据）的某一个版本\n\n\n\n  [1]: http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%E6%9E%B6%E6%9E%84%E5%9B%BE.png\n  [2]: http://oybpgm6jn.bkt.clouddn.com/HBase%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.jpg","slug":"B-HBase架构与物理模型","published":1,"updated":"2021-08-21T14:25:29.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r200042j4y10b0dax6","content":"<p>HBase可在大规模廉价的PC机器上搭建集群，其利用Hadoop的HDFS作为底层文件存储系统，利用MapReduce进行海量数据的分析，并使用ZooKeeper作为协同服务。<span id=\"more\"></span></p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"HBase架构图\"></p>\n<p>1、HBase整体架构</p>\n<p>Client：客户端，是HBase的入口，使用HBase的RPC机制与HMaster和HRegionServer进行通信。与HMaster进行通信，负责管理类的操作；与HRegionServer进行通信，负责数据读写类操作。</p>\n<p>ZooKeeper：分布式应用程序协调服务组件，负责管理多个HMaster的选举、存储HBase元数据信息（HMaster启动时将系统表-ROOT-加载到zk）、实时监控HRegionServer状态信息、存储所有Region的寻址入口等。</p>\n<p>HMaster：主节点，可以在启动HBase时设置为“启动多个”，但会通过选举机制保证只有一个用于提供服务。其主要负责管理Table的CRUD操作，管理RegionServer的负载均衡，Region的重分配及迁移等。</p>\n<p>HRegionServer：主要负责用户的I/O请求，向HDFS（Hadoop的分布式文件系统）中读写数据（HBase底层数据存储依靠于HDFS）。其包含一个HLog（实现Write ahead log，用户每次写入操作前，会写一份数据到HLog文件中）和多个HRegion。当前，每个HRegionServer可以管理大约100<del>1000个HRegion，每个HRegion大小为1</del>20GB。</p>\n<p>HRegion：存储的是实际数据，由一个或者多个HStore组成。每个table最开始只有一个HRegion，随着HRegion不断增大，当增大到一个阈值时，分割为两个新的HRegion。最后一个table会按行分割为多个HRegion，每个HRegion分散在不同的HregionServer中。HRegion是分布式存储和负载的最小单元（注意，不是存储的最小单元），即一个HRegion不会拆分到多个Server上。</p>\n<p>HStore：每个HStore保存了Table中的一个ColumnFamily（列族，即将经常同时访问的字段放在一起）的存储。每个HStore包含了一个MemStore和至少一个StoreFile。MemStore是Sorted Memory Buffer，用户写入数据时会首先放入MemStore中，当它满了以后，会缓冲（flush）成一个StoreFile。</p>\n<p>StoreFile：包含一个或者多个HFile，存在着Compact（合并）与Split（分裂）操作。</p>\n<p>HFile：结构分为6部分，主要包括，</p>\n<blockquote>\n<p>[a] Data Block: 存储表中的数据，该部分数据可以被压缩。Data block是由多个block组成，每个block的组成形式为“块头+key长度+value长度+key+value”。块的大小可以设置，默认是64KB。如果设置较大，利于scan；设置较小，利于随机查询。<br>[b] Meta Block（optional）：元数据块，用于保存元数据是kv类型的值。（注意，该数据块中只保存value值，key的值保存在第五项）。<br>[c] FileInfo：HFile的元信息，保存的数据是以key值排序的kv类型的值。<br>[d] DataIndex：Data block的索引，保存的是每个数据块在HFile中的位置、大小以及每个块的第一条key，即被索引的block中第一条记录的key。<br>[e] MetaBlock Index：Meta block的索引，保存的是每个元数据在HFile中的位置、大小及每个元数据的key值。<br>[f] Trailer Block：保存了HFile的一些基本信息，比如FileInfo的偏移、DataIndex块的个数等。</p>\n</blockquote>\n<p>2、HBase表物理模型</p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/HBase%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.jpg\" alt=\"HBase表物理模型\"></p>\n<p>HBase表的特征之一：多维有序映射。</p>\n<blockquote>\n<p>RowKey -&gt; 某一行数据;<br>Family -&gt; 某行数据中的某个列族；<br>Qualifier -&gt; 某行数据中某个列族的某一列；<br>Timestamp -&gt; 某行数据中某个列族的某一列（单元格数据）的某一个版本</p>\n</blockquote>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>HBase可在大规模廉价的PC机器上搭建集群，其利用Hadoop的HDFS作为底层文件存储系统，利用MapReduce进行海量数据的分析，并使用ZooKeeper作为协同服务。","more":"</p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/image/hexoBlog/HBase%E6%9E%B6%E6%9E%84%E5%9B%BE.png\" alt=\"HBase架构图\"></p>\n<p>1、HBase整体架构</p>\n<p>Client：客户端，是HBase的入口，使用HBase的RPC机制与HMaster和HRegionServer进行通信。与HMaster进行通信，负责管理类的操作；与HRegionServer进行通信，负责数据读写类操作。</p>\n<p>ZooKeeper：分布式应用程序协调服务组件，负责管理多个HMaster的选举、存储HBase元数据信息（HMaster启动时将系统表-ROOT-加载到zk）、实时监控HRegionServer状态信息、存储所有Region的寻址入口等。</p>\n<p>HMaster：主节点，可以在启动HBase时设置为“启动多个”，但会通过选举机制保证只有一个用于提供服务。其主要负责管理Table的CRUD操作，管理RegionServer的负载均衡，Region的重分配及迁移等。</p>\n<p>HRegionServer：主要负责用户的I/O请求，向HDFS（Hadoop的分布式文件系统）中读写数据（HBase底层数据存储依靠于HDFS）。其包含一个HLog（实现Write ahead log，用户每次写入操作前，会写一份数据到HLog文件中）和多个HRegion。当前，每个HRegionServer可以管理大约100<del>1000个HRegion，每个HRegion大小为1</del>20GB。</p>\n<p>HRegion：存储的是实际数据，由一个或者多个HStore组成。每个table最开始只有一个HRegion，随着HRegion不断增大，当增大到一个阈值时，分割为两个新的HRegion。最后一个table会按行分割为多个HRegion，每个HRegion分散在不同的HregionServer中。HRegion是分布式存储和负载的最小单元（注意，不是存储的最小单元），即一个HRegion不会拆分到多个Server上。</p>\n<p>HStore：每个HStore保存了Table中的一个ColumnFamily（列族，即将经常同时访问的字段放在一起）的存储。每个HStore包含了一个MemStore和至少一个StoreFile。MemStore是Sorted Memory Buffer，用户写入数据时会首先放入MemStore中，当它满了以后，会缓冲（flush）成一个StoreFile。</p>\n<p>StoreFile：包含一个或者多个HFile，存在着Compact（合并）与Split（分裂）操作。</p>\n<p>HFile：结构分为6部分，主要包括，</p>\n<blockquote>\n<p>[a] Data Block: 存储表中的数据，该部分数据可以被压缩。Data block是由多个block组成，每个block的组成形式为“块头+key长度+value长度+key+value”。块的大小可以设置，默认是64KB。如果设置较大，利于scan；设置较小，利于随机查询。<br>[b] Meta Block（optional）：元数据块，用于保存元数据是kv类型的值。（注意，该数据块中只保存value值，key的值保存在第五项）。<br>[c] FileInfo：HFile的元信息，保存的数据是以key值排序的kv类型的值。<br>[d] DataIndex：Data block的索引，保存的是每个数据块在HFile中的位置、大小以及每个块的第一条key，即被索引的block中第一条记录的key。<br>[e] MetaBlock Index：Meta block的索引，保存的是每个元数据在HFile中的位置、大小及每个元数据的key值。<br>[f] Trailer Block：保存了HFile的一些基本信息，比如FileInfo的偏移、DataIndex块的个数等。</p>\n</blockquote>\n<p>2、HBase表物理模型</p>\n<p><img src=\"http://oybpgm6jn.bkt.clouddn.com/HBase%E7%89%A9%E7%90%86%E6%A8%A1%E5%9E%8B.jpg\" alt=\"HBase表物理模型\"></p>\n<p>HBase表的特征之一：多维有序映射。</p>\n<blockquote>\n<p>RowKey -&gt; 某一行数据;<br>Family -&gt; 某行数据中的某个列族；<br>Qualifier -&gt; 某行数据中某个列族的某一列；<br>Timestamp -&gt; 某行数据中某个列族的某一列（单元格数据）的某一个版本</p>\n</blockquote>"},{"title":"Java字节流与字符流","date":"2017-10-25T09:15:36.000Z","_content":"先上结论：**一切都是字节流**！\n\n在[Unicode与UTF-8][1]这篇博文里，我提到了Unicode是所有字符编码的集合，UTF-8是一种编码规则，其实本质上都是用**字节编码**去表示**字符**。如“知”的Unicode编码是77E5，UTF-8编码是E79FA5。**字符是根据编码集对字节流进行翻译得到的产物。**<!--more-->\n\n字节流处理的单元是**1个字节**，通常用来处理视频、音频、图片等**二进制**文件。最基本的两个字节流类是InputStream和OutputStream，分别为输入流和输出流。其中，InputStream类定义了从字节流中读取字节的方法**read()**,OutputStream类定义了写入字节的方法**write()**。\n\n\n----------\n\n\n【之前一直弄不清输入流与输出流的区别，举个例子：将文本文件的内容显示到屏幕上，需要建立输入流or输出流？】\n答：输入流。可能会有人想，把文件读出来显示，不就是把文件内容输出嘛？但是“输入/输出流”是针对内存（包括内存缓冲）而言的。打印文件内容，对内存来说，需要做的是将文件内容读出来（对应InputStream的read()）输入到内存中，然后打印输出，因此需要建立“输入流”。\n\n\n----------\n\n\n字符流处理的单元是**2个字节**的Unicode字符，通常用来处理**文本文件**。输入字符流，需要把读取的字节序列从其对应的编码方式（如UTF-8）解码为Unicode码元序列，存入内存中。【收到字符的字节序列后，去掉UTf-8的包头，然后拼成Unicode码元】。\n\n最后上一张Java中IO操作的类继承图。\n![Java IO操作类][2]\n\n\n  [1]: http://buaazl.top/2017/10/21/Unicode%E4%B8%8EUTF-8/\n  [2]: http://oybpgm6jn.bkt.clouddn.com/Java%20IO%E6%93%8D%E4%BD%9C%E7%B1%BB.jpg","source":"_posts/Java字节流与字符流.md","raw":"---\ntitle: Java字节流与字符流\ndate: 2017-10-25 17:15:36\ntags:\n\t- 概念混淆\n---\n先上结论：**一切都是字节流**！\n\n在[Unicode与UTF-8][1]这篇博文里，我提到了Unicode是所有字符编码的集合，UTF-8是一种编码规则，其实本质上都是用**字节编码**去表示**字符**。如“知”的Unicode编码是77E5，UTF-8编码是E79FA5。**字符是根据编码集对字节流进行翻译得到的产物。**<!--more-->\n\n字节流处理的单元是**1个字节**，通常用来处理视频、音频、图片等**二进制**文件。最基本的两个字节流类是InputStream和OutputStream，分别为输入流和输出流。其中，InputStream类定义了从字节流中读取字节的方法**read()**,OutputStream类定义了写入字节的方法**write()**。\n\n\n----------\n\n\n【之前一直弄不清输入流与输出流的区别，举个例子：将文本文件的内容显示到屏幕上，需要建立输入流or输出流？】\n答：输入流。可能会有人想，把文件读出来显示，不就是把文件内容输出嘛？但是“输入/输出流”是针对内存（包括内存缓冲）而言的。打印文件内容，对内存来说，需要做的是将文件内容读出来（对应InputStream的read()）输入到内存中，然后打印输出，因此需要建立“输入流”。\n\n\n----------\n\n\n字符流处理的单元是**2个字节**的Unicode字符，通常用来处理**文本文件**。输入字符流，需要把读取的字节序列从其对应的编码方式（如UTF-8）解码为Unicode码元序列，存入内存中。【收到字符的字节序列后，去掉UTf-8的包头，然后拼成Unicode码元】。\n\n最后上一张Java中IO操作的类继承图。\n![Java IO操作类][2]\n\n\n  [1]: http://buaazl.top/2017/10/21/Unicode%E4%B8%8EUTF-8/\n  [2]: http://oybpgm6jn.bkt.clouddn.com/Java%20IO%E6%93%8D%E4%BD%9C%E7%B1%BB.jpg","slug":"Java字节流与字符流","published":1,"updated":"2021-08-21T14:25:29.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r300052j4y8lr30x84","content":"<p>先上结论：<strong>一切都是字节流</strong>！</p>\n<p>在<a href=\"http://buaazl.top/2017/10/21/Unicode%E4%B8%8EUTF-8/\">Unicode与UTF-8</a>这篇博文里，我提到了Unicode是所有字符编码的集合，UTF-8是一种编码规则，其实本质上都是用<strong>字节编码</strong>去表示<strong>字符</strong>。如“知”的Unicode编码是77E5，UTF-8编码是E79FA5。<strong>字符是根据编码集对字节流进行翻译得到的产物。</strong><span id=\"more\"></span></p>\n<p>字节流处理的单元是<strong>1个字节</strong>，通常用来处理视频、音频、图片等<strong>二进制</strong>文件。最基本的两个字节流类是InputStream和OutputStream，分别为输入流和输出流。其中，InputStream类定义了从字节流中读取字节的方法<strong>read()</strong>,OutputStream类定义了写入字节的方法**write()**。</p>\n<hr>\n<p>【之前一直弄不清输入流与输出流的区别，举个例子：将文本文件的内容显示到屏幕上，需要建立输入流or输出流？】<br>答：输入流。可能会有人想，把文件读出来显示，不就是把文件内容输出嘛？但是“输入/输出流”是针对内存（包括内存缓冲）而言的。打印文件内容，对内存来说，需要做的是将文件内容读出来（对应InputStream的read()）输入到内存中，然后打印输出，因此需要建立“输入流”。</p>\n<hr>\n<p>字符流处理的单元是<strong>2个字节</strong>的Unicode字符，通常用来处理<strong>文本文件</strong>。输入字符流，需要把读取的字节序列从其对应的编码方式（如UTF-8）解码为Unicode码元序列，存入内存中。【收到字符的字节序列后，去掉UTf-8的包头，然后拼成Unicode码元】。</p>\n<p>最后上一张Java中IO操作的类继承图。<br><img src=\"http://oybpgm6jn.bkt.clouddn.com/Java%20IO%E6%93%8D%E4%BD%9C%E7%B1%BB.jpg\" alt=\"Java IO操作类\"></p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>先上结论：<strong>一切都是字节流</strong>！</p>\n<p>在<a href=\"http://buaazl.top/2017/10/21/Unicode%E4%B8%8EUTF-8/\">Unicode与UTF-8</a>这篇博文里，我提到了Unicode是所有字符编码的集合，UTF-8是一种编码规则，其实本质上都是用<strong>字节编码</strong>去表示<strong>字符</strong>。如“知”的Unicode编码是77E5，UTF-8编码是E79FA5。<strong>字符是根据编码集对字节流进行翻译得到的产物。</strong>","more":"</p>\n<p>字节流处理的单元是<strong>1个字节</strong>，通常用来处理视频、音频、图片等<strong>二进制</strong>文件。最基本的两个字节流类是InputStream和OutputStream，分别为输入流和输出流。其中，InputStream类定义了从字节流中读取字节的方法<strong>read()</strong>,OutputStream类定义了写入字节的方法**write()**。</p>\n<hr>\n<p>【之前一直弄不清输入流与输出流的区别，举个例子：将文本文件的内容显示到屏幕上，需要建立输入流or输出流？】<br>答：输入流。可能会有人想，把文件读出来显示，不就是把文件内容输出嘛？但是“输入/输出流”是针对内存（包括内存缓冲）而言的。打印文件内容，对内存来说，需要做的是将文件内容读出来（对应InputStream的read()）输入到内存中，然后打印输出，因此需要建立“输入流”。</p>\n<hr>\n<p>字符流处理的单元是<strong>2个字节</strong>的Unicode字符，通常用来处理<strong>文本文件</strong>。输入字符流，需要把读取的字节序列从其对应的编码方式（如UTF-8）解码为Unicode码元序列，存入内存中。【收到字符的字节序列后，去掉UTf-8的包头，然后拼成Unicode码元】。</p>\n<p>最后上一张Java中IO操作的类继承图。<br><img src=\"http://oybpgm6jn.bkt.clouddn.com/Java%20IO%E6%93%8D%E4%BD%9C%E7%B1%BB.jpg\" alt=\"Java IO操作类\"></p>"},{"title":"Unicode与UTF-8","date":"2017-10-21T11:31:14.000Z","_content":"简单来说，\n**Unicode**：是ISO组织提出的UCS（Universal Multiple-Octet Coded Character Set），为所有字母和符号编码的字符集，即为每一个字符分配一个唯一的“ID”（学名码位，Code point）；\n**UTF-8**：为解决Unicode在网络上传输的问题，面向传输的众多UTF（UCS Transfer Format）标准出现了，它是一种编码规则，每次传输8个位数据。<!--more-->\n\nUnicode其实也是一种对ASCII编码（只包括英文字母、数字和一些字符）的扩展，如同GBK编码一般。Unicode采用两个字节，也就是16位来统一表示所有的字符。对于ASCII编码里的一个字节的“半角”字符，Unicode保持其编码不变，只是将长度由原来的8位扩展为16位（高8位添加0），因此这种方案在保存纯英文文本时会多浪费一倍的空间。\n\nUTF-8是为传输而设计的编码规则，它是一种变长的编码方式，使用1~4个字节来表示一个字符，根据不同的字符而变化字节长度。当字符在ASCII码的范围时，就用一个字节表示。Unicode中一个中文字符占2个字节，而UTF-8中一个中文字符占3个字节。Unicode到UTF-8不是直接的对应，需要一些算法和规则来转换。\n\n编码规则如下：\n\n    Unicode                  UTF-8\n    U+ 0000 ~ U+ 007F：    0xxxxxxx\n    U+ 0080 ~ U+ 07FF：    110xxxxx 10xxxxxx\n    U+ 0800 ~ U+ FFFF：    1110xxxx 10xxxxxx 10xxxxxx\n    U+ 10000 ~ U+ 1FFFF：  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n例如：“知”的码位是U+77E5，那么它的UTF-8编码字节序列为？\n\n        7     7     E     5\n        0111  0111  1110  0101\n        0111   011111   100101（二进制的77E5）\n    1110xxxx 10xxxxxx 10xxxxxx（模板，第三行）\n    11100111 10011111 10100101（带入模板）\n    E   7    9   F    A   5\n故“知”的UTF-8的编码字节序列为：E79FA5(3个字节表示一个中文字符)","source":"_posts/Unicode与UTF-8.md","raw":"---\ntitle: Unicode与UTF-8\ndate: 2017-10-21 19:31:14\ntags:\n\t- 编程基础\n---\n简单来说，\n**Unicode**：是ISO组织提出的UCS（Universal Multiple-Octet Coded Character Set），为所有字母和符号编码的字符集，即为每一个字符分配一个唯一的“ID”（学名码位，Code point）；\n**UTF-8**：为解决Unicode在网络上传输的问题，面向传输的众多UTF（UCS Transfer Format）标准出现了，它是一种编码规则，每次传输8个位数据。<!--more-->\n\nUnicode其实也是一种对ASCII编码（只包括英文字母、数字和一些字符）的扩展，如同GBK编码一般。Unicode采用两个字节，也就是16位来统一表示所有的字符。对于ASCII编码里的一个字节的“半角”字符，Unicode保持其编码不变，只是将长度由原来的8位扩展为16位（高8位添加0），因此这种方案在保存纯英文文本时会多浪费一倍的空间。\n\nUTF-8是为传输而设计的编码规则，它是一种变长的编码方式，使用1~4个字节来表示一个字符，根据不同的字符而变化字节长度。当字符在ASCII码的范围时，就用一个字节表示。Unicode中一个中文字符占2个字节，而UTF-8中一个中文字符占3个字节。Unicode到UTF-8不是直接的对应，需要一些算法和规则来转换。\n\n编码规则如下：\n\n    Unicode                  UTF-8\n    U+ 0000 ~ U+ 007F：    0xxxxxxx\n    U+ 0080 ~ U+ 07FF：    110xxxxx 10xxxxxx\n    U+ 0800 ~ U+ FFFF：    1110xxxx 10xxxxxx 10xxxxxx\n    U+ 10000 ~ U+ 1FFFF：  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n例如：“知”的码位是U+77E5，那么它的UTF-8编码字节序列为？\n\n        7     7     E     5\n        0111  0111  1110  0101\n        0111   011111   100101（二进制的77E5）\n    1110xxxx 10xxxxxx 10xxxxxx（模板，第三行）\n    11100111 10011111 10100101（带入模板）\n    E   7    9   F    A   5\n故“知”的UTF-8的编码字节序列为：E79FA5(3个字节表示一个中文字符)","slug":"Unicode与UTF-8","published":1,"updated":"2021-08-21T14:25:29.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r400082j4yak9o4b1g","content":"<p>简单来说，<br><strong>Unicode</strong>：是ISO组织提出的UCS（Universal Multiple-Octet Coded Character Set），为所有字母和符号编码的字符集，即为每一个字符分配一个唯一的“ID”（学名码位，Code point）；<br><strong>UTF-8</strong>：为解决Unicode在网络上传输的问题，面向传输的众多UTF（UCS Transfer Format）标准出现了，它是一种编码规则，每次传输8个位数据。<span id=\"more\"></span></p>\n<p>Unicode其实也是一种对ASCII编码（只包括英文字母、数字和一些字符）的扩展，如同GBK编码一般。Unicode采用两个字节，也就是16位来统一表示所有的字符。对于ASCII编码里的一个字节的“半角”字符，Unicode保持其编码不变，只是将长度由原来的8位扩展为16位（高8位添加0），因此这种方案在保存纯英文文本时会多浪费一倍的空间。</p>\n<p>UTF-8是为传输而设计的编码规则，它是一种变长的编码方式，使用1~4个字节来表示一个字符，根据不同的字符而变化字节长度。当字符在ASCII码的范围时，就用一个字节表示。Unicode中一个中文字符占2个字节，而UTF-8中一个中文字符占3个字节。Unicode到UTF-8不是直接的对应，需要一些算法和规则来转换。</p>\n<p>编码规则如下：</p>\n<pre><code>Unicode                  UTF-8\nU+ 0000 ~ U+ 007F：    0xxxxxxx\nU+ 0080 ~ U+ 07FF：    110xxxxx 10xxxxxx\nU+ 0800 ~ U+ FFFF：    1110xxxx 10xxxxxx 10xxxxxx\nU+ 10000 ~ U+ 1FFFF：  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n<p>例如：“知”的码位是U+77E5，那么它的UTF-8编码字节序列为？</p>\n<pre><code>    7     7     E     5\n    0111  0111  1110  0101\n    0111   011111   100101（二进制的77E5）\n1110xxxx 10xxxxxx 10xxxxxx（模板，第三行）\n11100111 10011111 10100101（带入模板）\nE   7    9   F    A   5\n</code></pre>\n<p>故“知”的UTF-8的编码字节序列为：E79FA5(3个字节表示一个中文字符)</p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>简单来说，<br><strong>Unicode</strong>：是ISO组织提出的UCS（Universal Multiple-Octet Coded Character Set），为所有字母和符号编码的字符集，即为每一个字符分配一个唯一的“ID”（学名码位，Code point）；<br><strong>UTF-8</strong>：为解决Unicode在网络上传输的问题，面向传输的众多UTF（UCS Transfer Format）标准出现了，它是一种编码规则，每次传输8个位数据。","more":"</p>\n<p>Unicode其实也是一种对ASCII编码（只包括英文字母、数字和一些字符）的扩展，如同GBK编码一般。Unicode采用两个字节，也就是16位来统一表示所有的字符。对于ASCII编码里的一个字节的“半角”字符，Unicode保持其编码不变，只是将长度由原来的8位扩展为16位（高8位添加0），因此这种方案在保存纯英文文本时会多浪费一倍的空间。</p>\n<p>UTF-8是为传输而设计的编码规则，它是一种变长的编码方式，使用1~4个字节来表示一个字符，根据不同的字符而变化字节长度。当字符在ASCII码的范围时，就用一个字节表示。Unicode中一个中文字符占2个字节，而UTF-8中一个中文字符占3个字节。Unicode到UTF-8不是直接的对应，需要一些算法和规则来转换。</p>\n<p>编码规则如下：</p>\n<pre><code>Unicode                  UTF-8\nU+ 0000 ~ U+ 007F：    0xxxxxxx\nU+ 0080 ~ U+ 07FF：    110xxxxx 10xxxxxx\nU+ 0800 ~ U+ FFFF：    1110xxxx 10xxxxxx 10xxxxxx\nU+ 10000 ~ U+ 1FFFF：  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n<p>例如：“知”的码位是U+77E5，那么它的UTF-8编码字节序列为？</p>\n<pre><code>    7     7     E     5\n    0111  0111  1110  0101\n    0111   011111   100101（二进制的77E5）\n1110xxxx 10xxxxxx 10xxxxxx（模板，第三行）\n11100111 10011111 10100101（带入模板）\nE   7    9   F    A   5\n</code></pre>\n<p>故“知”的UTF-8的编码字节序列为：E79FA5(3个字节表示一个中文字符)</p>"},{"title":"分布式一致性","date":"2017-12-25T07:12:06.000Z","_content":"\n为了保证数据的高可用性，通常会在不同物理节点上保存多个副本。而为了保证对用户提供统一、正确的增删改查等语义，需要保证不同物理机器上的副本是一致的。\n\n## 1. 分布式事务\n单个节点上的数据操作可以满足ACID，但是相互独立的节点无法知道对方的事务执行情况。如果要保证数据的一致性，就必须对数据写操作要求其能够实现：要么在全部节点执行，要么在全部节点都不执行。<!--more-->\n\n>分布式事务是指会涉及到多个数据库的事务。这种情况下，一个数据库内部操作是否能提交成功，不仅取决于自身，还与全局中其他事务的成功与否相关。为了保证数据的一致性，要求事务产生统一的结果：即全部提交成功或者全部回滚。\n\n## 2. 数据一致性模型\n维护数据副本一致性的代价是很高的，因此，为了满足不同场景的要求，系统采用不同的一致性模型，主要分为以下几种：\n\n### 2.1 强一致性\n无论更新哪一个数据副本，都要求随后的读操作能获取到最新的数据，即要求“立即保持一致”。比如2PC。\n\n### 2.2 弱一致性\n更新数据副本后，要完成所有数据的一致性，需要等待一段时间，这段时间称之为“不一致性窗口”。\n\n### 2.3 最终一致性\n是一种特殊形式的弱一致性。不保证任意时刻任意节点上的同一份数据都是一致的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化，即一段时间后节点间的数据会最终达到一致的状态。\n根据不同的保证，最终一致性又可以划分成以下几种模型：\n> a)因果一致性：A、B、C三个进程分别独自操作数据，若A更新数据后通知了B，则B在随后的读取中能获取到A更新的数据；但是A没有通知C，因此系统并不一定保证C会获取到A更新的数据值。\n\n> b)读自写一致性：某用户更新数据后，在随后的读取操作中能获取到其更新的值；但系统并不保证其他用户能读取到最新值。\n\n> c)会话一致性：将读自写一致性限定在一个会话的范围内。\n\n> d)单调读一致性：用户读取某个数据值后，在后续的操作中不会读取到该数据更早的版本。\n\n> e)时间轴一致性：也叫单调写一致性，要求数据的所有副本以相同的顺序执行所有的更新操作。 \n\n## 3. 两阶段提交协议（2PC）\n对于分布式事务，如果直接提交请求，部分节点执行成功，部分节点失败，则会出现数据的不一致性。\n>两阶段提交协议是为了保证分布式事务的数据一致性。为了能够协调并掌握各个节点（称为参与者）的事务执行情况，这里引入一个组件（协调者）。整个2PC分为：准备阶段和提交阶段，准备阶段用于“询问”各个参与者是否能够满足提交，提交阶段则为执行阶段（可能执行提交，也可能执行回滚）\n\n### 3.1 准备阶段\n* 协调者向各个参与者发送请求，询问是否可以执行提交，并等待各个参与者的恢复；\n* 参与者收到协调者发来的询问请求后，执行事务操作（记录redo和undo），但注意此时还并未提交。如果事务操作成功，则参与者向协调者恢复“yes”，否则回复“no”；\n* 协调者接收到所有参与者的回复，当然也可能存在请求超时的情况。\n\n### 3.2 提交阶段\n* 若所有的参与者都成功执行了事务，切协调者收集到了所有参与者回复的“yes”，则协调者向所有节点发送“commit”请求，要求所有参与者执行提交操作；只要有一个参与者执行失败或者请求超时，则协调者向所有参与者发送“roll back”请求，要去所有参与者执行回滚；\n* 所有的参与者执行【提交】或者【回滚并释放所有事务处理过程中占用的锁资源】。完成后，向协调者发送确认信息；协调者收到所有确认消息后，完成事务。\n\n### 3.3 缺陷\n1. 同步阻塞：事务提交过程中，所有参与节点都是阻塞的。这就意味着，当有其他第三方节点访问该节点的资源时，将会处于阻塞状态；\n2. 单点故障：一旦协调者发生故障，则会导致参与者处于阻塞状态。例如，当协调者在提交阶段宕机了，参与者锁定事务资源并会一直等待协调者的请求，导致无法完成事务操作。尽管可以通过选举策略重新选择一个协调者，但是无法解决参与者阻塞的问题；\n3. 数据不一致：由于协调者在发送commit过程中发生故障，或者因为脑裂（局部网络异常，网络分区）导致部分参与者无法接收commit请求，则会使得部分节点收到commit请求并执行，部分节点没收到commit，从而产生数据的不一致性。\n\n## 4. 三阶段提交协议（3PC）\n为了解决2PC中的部分问题，3PC做了一些改进，总体来说就是将2PC中的准备阶段一分为二：CanCommit阶段和PreCommit阶段。另外，3PC中还引入了参与者的超时机制。\n\n### 4.1 CanCommit阶段\n>a. 协调者向所有参与者发送CanCommit请求，询问是否可以执行事务提交，并等待所有参与者的回复；\n\n>b. 参与者收到请求后，如果判断自身能够完成事务提交，则回复“yes”，否则回复“no”。\n\n### 4.2 PreCommit阶段\n根据CanCommit阶段的回复，PreCommit阶段有两种情况：\n1、协调者收到所有参与者回复的“yes”\n>a. 协调者向所有参与者发送PreCommit请求，并等待回复；\n\n>b. 参与者收到请求后，执行具体的事务操作（记录undo和redo），此时事务还没有提交；\n\n>c. 如果参与者中事务执行成功，则返回ACK确认操作，否则返回错误信息。\n\n2、协调者收到的回复中包含“no”或者请求超时\n>a. 协调者向所有参与者发送abort请求；\n\n>b. 参与者收到abort请求，或者参与者超时之后也未收到来自协调者的请求，则中断事务。\n\n### 4.3 DoCommit阶段\n根据PreCommit阶段的回复，DoCommit阶段也有两种情况：\n1、协调者收到所有参与者的ACK回复\n>a. 协调者向所有参与者发送DoCommit请求，并等待回复；\n\n>b. 参与者收到请求后，执行事务的提交操作，执行完成后，向协调者发送ACK确认消息；\n\n>c. 协调者收到所有来自参与者的ACK消息后，完成事务。\n\n2、协调者没有收到参与者的回复，即等待超时；或者协调者收到的消息不是ACK，而是错误消息\n>a. 协调者向所有参与者发送abort请求；\n\n>b. 参与者收到abort请求后，根据之前记录的undo和redo日志，执行事务回滚，并在回滚完成后，释放所有在事务中占用的锁资源；\n\n>c. 参与者完成回滚及释放资源后，向协调者发送ACK消息；协调者收到所有参与者回复的消息后，中断事务。\n\n注意：如果参与者在超时等待后，既没有收到DoCommit，也没收到abort请求，则会选择继续进行事务提交。因为目前已经处于第三阶段了，有理由相信成功提交的几率更大。\n\n3PC解决了2PC中的单点故障问题，并减少了阻塞。因为参与者在超时等待后，会自动提交commit操作，而不是一直等待下去。但是3PC也无法解决数据不一致性，例如，当部分参与者收到了abort请求，而另一部分参与者由于网络通信原因没有收到abort请求，自动执行了commit，则会导致数据不一致。\n\n## 5. Paxos算法\nPaxos是一种基于消息传递的提高分布式系统容错性的一致性算法。\n\n背景：\n>1、参与者（节点）可能会随时宕机或者出现网络分割的情况\n\n>2、消息传递可能会出现延迟、重复、丢失等可能性，但是其不会被损坏、篡改（没有拜占庭将军的问题）\n\n目的：\n>在分布式系统中，关于某个数据值达成一致，从而保证分布式系统的数据一致性。\n\nPaxos算法中存在三种角色：提案者（Proposer），接收者（Acceptor），学习者（Learner）。\n\n### 5.1 Proposer生成提案\n>Prepare请求：Proposer提出一个编号为M1的提案，发送给大多数Acceptor，等待回应；\n\n如果Acceptor从未批准过任何提案，则返回数据中关于提案可以为空；否则，返回其批准过的提案中编号最大的提案所对应的编号和Value值；\n>Accept请求：Proposer接收到了来自半数以上的Acceptor的回复，则其可以生成编号为M1，值为V1的提案了。注意，值V1应该等于所有回复中编号最大的提案对应的value值。如果所有的回复中都无相关[编号，value]数据，则Proposer可自己提出所需要的数据，赋值给V1。\n\n\n### 5.2 Acceptor接收提案\n若Acceptor之前没有批准过任何提案，则可以批准刚接收的编号为M1的提案；否则，Acceptor不得批准编号小于之前已经批准的提案中最大的编号（例如，之前已经批准M11，M12，M13，M13编号最大，则接下来的提案中，如果编号小于M13，则不得批准）\n\n### 5.3 Learner学习提案\n一旦某个提案M0，V0被大多数Acceptor批准，则认为该提案被“选定”。对于已经被“选定”的提案，对于所有的Learner而言，其是可见的（即可被获取到的）","source":"_posts/分布式一致性.md","raw":"---\ntitle: 分布式一致性\ndate: 2017-12-25 15:12:06\ntags:\n\t- 分布式\n---\n\n为了保证数据的高可用性，通常会在不同物理节点上保存多个副本。而为了保证对用户提供统一、正确的增删改查等语义，需要保证不同物理机器上的副本是一致的。\n\n## 1. 分布式事务\n单个节点上的数据操作可以满足ACID，但是相互独立的节点无法知道对方的事务执行情况。如果要保证数据的一致性，就必须对数据写操作要求其能够实现：要么在全部节点执行，要么在全部节点都不执行。<!--more-->\n\n>分布式事务是指会涉及到多个数据库的事务。这种情况下，一个数据库内部操作是否能提交成功，不仅取决于自身，还与全局中其他事务的成功与否相关。为了保证数据的一致性，要求事务产生统一的结果：即全部提交成功或者全部回滚。\n\n## 2. 数据一致性模型\n维护数据副本一致性的代价是很高的，因此，为了满足不同场景的要求，系统采用不同的一致性模型，主要分为以下几种：\n\n### 2.1 强一致性\n无论更新哪一个数据副本，都要求随后的读操作能获取到最新的数据，即要求“立即保持一致”。比如2PC。\n\n### 2.2 弱一致性\n更新数据副本后，要完成所有数据的一致性，需要等待一段时间，这段时间称之为“不一致性窗口”。\n\n### 2.3 最终一致性\n是一种特殊形式的弱一致性。不保证任意时刻任意节点上的同一份数据都是一致的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化，即一段时间后节点间的数据会最终达到一致的状态。\n根据不同的保证，最终一致性又可以划分成以下几种模型：\n> a)因果一致性：A、B、C三个进程分别独自操作数据，若A更新数据后通知了B，则B在随后的读取中能获取到A更新的数据；但是A没有通知C，因此系统并不一定保证C会获取到A更新的数据值。\n\n> b)读自写一致性：某用户更新数据后，在随后的读取操作中能获取到其更新的值；但系统并不保证其他用户能读取到最新值。\n\n> c)会话一致性：将读自写一致性限定在一个会话的范围内。\n\n> d)单调读一致性：用户读取某个数据值后，在后续的操作中不会读取到该数据更早的版本。\n\n> e)时间轴一致性：也叫单调写一致性，要求数据的所有副本以相同的顺序执行所有的更新操作。 \n\n## 3. 两阶段提交协议（2PC）\n对于分布式事务，如果直接提交请求，部分节点执行成功，部分节点失败，则会出现数据的不一致性。\n>两阶段提交协议是为了保证分布式事务的数据一致性。为了能够协调并掌握各个节点（称为参与者）的事务执行情况，这里引入一个组件（协调者）。整个2PC分为：准备阶段和提交阶段，准备阶段用于“询问”各个参与者是否能够满足提交，提交阶段则为执行阶段（可能执行提交，也可能执行回滚）\n\n### 3.1 准备阶段\n* 协调者向各个参与者发送请求，询问是否可以执行提交，并等待各个参与者的恢复；\n* 参与者收到协调者发来的询问请求后，执行事务操作（记录redo和undo），但注意此时还并未提交。如果事务操作成功，则参与者向协调者恢复“yes”，否则回复“no”；\n* 协调者接收到所有参与者的回复，当然也可能存在请求超时的情况。\n\n### 3.2 提交阶段\n* 若所有的参与者都成功执行了事务，切协调者收集到了所有参与者回复的“yes”，则协调者向所有节点发送“commit”请求，要求所有参与者执行提交操作；只要有一个参与者执行失败或者请求超时，则协调者向所有参与者发送“roll back”请求，要去所有参与者执行回滚；\n* 所有的参与者执行【提交】或者【回滚并释放所有事务处理过程中占用的锁资源】。完成后，向协调者发送确认信息；协调者收到所有确认消息后，完成事务。\n\n### 3.3 缺陷\n1. 同步阻塞：事务提交过程中，所有参与节点都是阻塞的。这就意味着，当有其他第三方节点访问该节点的资源时，将会处于阻塞状态；\n2. 单点故障：一旦协调者发生故障，则会导致参与者处于阻塞状态。例如，当协调者在提交阶段宕机了，参与者锁定事务资源并会一直等待协调者的请求，导致无法完成事务操作。尽管可以通过选举策略重新选择一个协调者，但是无法解决参与者阻塞的问题；\n3. 数据不一致：由于协调者在发送commit过程中发生故障，或者因为脑裂（局部网络异常，网络分区）导致部分参与者无法接收commit请求，则会使得部分节点收到commit请求并执行，部分节点没收到commit，从而产生数据的不一致性。\n\n## 4. 三阶段提交协议（3PC）\n为了解决2PC中的部分问题，3PC做了一些改进，总体来说就是将2PC中的准备阶段一分为二：CanCommit阶段和PreCommit阶段。另外，3PC中还引入了参与者的超时机制。\n\n### 4.1 CanCommit阶段\n>a. 协调者向所有参与者发送CanCommit请求，询问是否可以执行事务提交，并等待所有参与者的回复；\n\n>b. 参与者收到请求后，如果判断自身能够完成事务提交，则回复“yes”，否则回复“no”。\n\n### 4.2 PreCommit阶段\n根据CanCommit阶段的回复，PreCommit阶段有两种情况：\n1、协调者收到所有参与者回复的“yes”\n>a. 协调者向所有参与者发送PreCommit请求，并等待回复；\n\n>b. 参与者收到请求后，执行具体的事务操作（记录undo和redo），此时事务还没有提交；\n\n>c. 如果参与者中事务执行成功，则返回ACK确认操作，否则返回错误信息。\n\n2、协调者收到的回复中包含“no”或者请求超时\n>a. 协调者向所有参与者发送abort请求；\n\n>b. 参与者收到abort请求，或者参与者超时之后也未收到来自协调者的请求，则中断事务。\n\n### 4.3 DoCommit阶段\n根据PreCommit阶段的回复，DoCommit阶段也有两种情况：\n1、协调者收到所有参与者的ACK回复\n>a. 协调者向所有参与者发送DoCommit请求，并等待回复；\n\n>b. 参与者收到请求后，执行事务的提交操作，执行完成后，向协调者发送ACK确认消息；\n\n>c. 协调者收到所有来自参与者的ACK消息后，完成事务。\n\n2、协调者没有收到参与者的回复，即等待超时；或者协调者收到的消息不是ACK，而是错误消息\n>a. 协调者向所有参与者发送abort请求；\n\n>b. 参与者收到abort请求后，根据之前记录的undo和redo日志，执行事务回滚，并在回滚完成后，释放所有在事务中占用的锁资源；\n\n>c. 参与者完成回滚及释放资源后，向协调者发送ACK消息；协调者收到所有参与者回复的消息后，中断事务。\n\n注意：如果参与者在超时等待后，既没有收到DoCommit，也没收到abort请求，则会选择继续进行事务提交。因为目前已经处于第三阶段了，有理由相信成功提交的几率更大。\n\n3PC解决了2PC中的单点故障问题，并减少了阻塞。因为参与者在超时等待后，会自动提交commit操作，而不是一直等待下去。但是3PC也无法解决数据不一致性，例如，当部分参与者收到了abort请求，而另一部分参与者由于网络通信原因没有收到abort请求，自动执行了commit，则会导致数据不一致。\n\n## 5. Paxos算法\nPaxos是一种基于消息传递的提高分布式系统容错性的一致性算法。\n\n背景：\n>1、参与者（节点）可能会随时宕机或者出现网络分割的情况\n\n>2、消息传递可能会出现延迟、重复、丢失等可能性，但是其不会被损坏、篡改（没有拜占庭将军的问题）\n\n目的：\n>在分布式系统中，关于某个数据值达成一致，从而保证分布式系统的数据一致性。\n\nPaxos算法中存在三种角色：提案者（Proposer），接收者（Acceptor），学习者（Learner）。\n\n### 5.1 Proposer生成提案\n>Prepare请求：Proposer提出一个编号为M1的提案，发送给大多数Acceptor，等待回应；\n\n如果Acceptor从未批准过任何提案，则返回数据中关于提案可以为空；否则，返回其批准过的提案中编号最大的提案所对应的编号和Value值；\n>Accept请求：Proposer接收到了来自半数以上的Acceptor的回复，则其可以生成编号为M1，值为V1的提案了。注意，值V1应该等于所有回复中编号最大的提案对应的value值。如果所有的回复中都无相关[编号，value]数据，则Proposer可自己提出所需要的数据，赋值给V1。\n\n\n### 5.2 Acceptor接收提案\n若Acceptor之前没有批准过任何提案，则可以批准刚接收的编号为M1的提案；否则，Acceptor不得批准编号小于之前已经批准的提案中最大的编号（例如，之前已经批准M11，M12，M13，M13编号最大，则接下来的提案中，如果编号小于M13，则不得批准）\n\n### 5.3 Learner学习提案\n一旦某个提案M0，V0被大多数Acceptor批准，则认为该提案被“选定”。对于已经被“选定”的提案，对于所有的Learner而言，其是可见的（即可被获取到的）","slug":"分布式一致性","published":1,"updated":"2021-08-21T14:25:29.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r500092j4y6s6yb2ju","content":"<p>为了保证数据的高可用性，通常会在不同物理节点上保存多个副本。而为了保证对用户提供统一、正确的增删改查等语义，需要保证不同物理机器上的副本是一致的。</p>\n<h2 id=\"1-分布式事务\"><a href=\"#1-分布式事务\" class=\"headerlink\" title=\"1. 分布式事务\"></a>1. 分布式事务</h2><p>单个节点上的数据操作可以满足ACID，但是相互独立的节点无法知道对方的事务执行情况。如果要保证数据的一致性，就必须对数据写操作要求其能够实现：要么在全部节点执行，要么在全部节点都不执行。<span id=\"more\"></span></p>\n<blockquote>\n<p>分布式事务是指会涉及到多个数据库的事务。这种情况下，一个数据库内部操作是否能提交成功，不仅取决于自身，还与全局中其他事务的成功与否相关。为了保证数据的一致性，要求事务产生统一的结果：即全部提交成功或者全部回滚。</p>\n</blockquote>\n<h2 id=\"2-数据一致性模型\"><a href=\"#2-数据一致性模型\" class=\"headerlink\" title=\"2. 数据一致性模型\"></a>2. 数据一致性模型</h2><p>维护数据副本一致性的代价是很高的，因此，为了满足不同场景的要求，系统采用不同的一致性模型，主要分为以下几种：</p>\n<h3 id=\"2-1-强一致性\"><a href=\"#2-1-强一致性\" class=\"headerlink\" title=\"2.1 强一致性\"></a>2.1 强一致性</h3><p>无论更新哪一个数据副本，都要求随后的读操作能获取到最新的数据，即要求“立即保持一致”。比如2PC。</p>\n<h3 id=\"2-2-弱一致性\"><a href=\"#2-2-弱一致性\" class=\"headerlink\" title=\"2.2 弱一致性\"></a>2.2 弱一致性</h3><p>更新数据副本后，要完成所有数据的一致性，需要等待一段时间，这段时间称之为“不一致性窗口”。</p>\n<h3 id=\"2-3-最终一致性\"><a href=\"#2-3-最终一致性\" class=\"headerlink\" title=\"2.3 最终一致性\"></a>2.3 最终一致性</h3><p>是一种特殊形式的弱一致性。不保证任意时刻任意节点上的同一份数据都是一致的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化，即一段时间后节点间的数据会最终达到一致的状态。<br>根据不同的保证，最终一致性又可以划分成以下几种模型：</p>\n<blockquote>\n<p>a)因果一致性：A、B、C三个进程分别独自操作数据，若A更新数据后通知了B，则B在随后的读取中能获取到A更新的数据；但是A没有通知C，因此系统并不一定保证C会获取到A更新的数据值。</p>\n</blockquote>\n<blockquote>\n<p>b)读自写一致性：某用户更新数据后，在随后的读取操作中能获取到其更新的值；但系统并不保证其他用户能读取到最新值。</p>\n</blockquote>\n<blockquote>\n<p>c)会话一致性：将读自写一致性限定在一个会话的范围内。</p>\n</blockquote>\n<blockquote>\n<p>d)单调读一致性：用户读取某个数据值后，在后续的操作中不会读取到该数据更早的版本。</p>\n</blockquote>\n<blockquote>\n<p>e)时间轴一致性：也叫单调写一致性，要求数据的所有副本以相同的顺序执行所有的更新操作。 </p>\n</blockquote>\n<h2 id=\"3-两阶段提交协议（2PC）\"><a href=\"#3-两阶段提交协议（2PC）\" class=\"headerlink\" title=\"3. 两阶段提交协议（2PC）\"></a>3. 两阶段提交协议（2PC）</h2><p>对于分布式事务，如果直接提交请求，部分节点执行成功，部分节点失败，则会出现数据的不一致性。</p>\n<blockquote>\n<p>两阶段提交协议是为了保证分布式事务的数据一致性。为了能够协调并掌握各个节点（称为参与者）的事务执行情况，这里引入一个组件（协调者）。整个2PC分为：准备阶段和提交阶段，准备阶段用于“询问”各个参与者是否能够满足提交，提交阶段则为执行阶段（可能执行提交，也可能执行回滚）</p>\n</blockquote>\n<h3 id=\"3-1-准备阶段\"><a href=\"#3-1-准备阶段\" class=\"headerlink\" title=\"3.1 准备阶段\"></a>3.1 准备阶段</h3><ul>\n<li>协调者向各个参与者发送请求，询问是否可以执行提交，并等待各个参与者的恢复；</li>\n<li>参与者收到协调者发来的询问请求后，执行事务操作（记录redo和undo），但注意此时还并未提交。如果事务操作成功，则参与者向协调者恢复“yes”，否则回复“no”；</li>\n<li>协调者接收到所有参与者的回复，当然也可能存在请求超时的情况。</li>\n</ul>\n<h3 id=\"3-2-提交阶段\"><a href=\"#3-2-提交阶段\" class=\"headerlink\" title=\"3.2 提交阶段\"></a>3.2 提交阶段</h3><ul>\n<li>若所有的参与者都成功执行了事务，切协调者收集到了所有参与者回复的“yes”，则协调者向所有节点发送“commit”请求，要求所有参与者执行提交操作；只要有一个参与者执行失败或者请求超时，则协调者向所有参与者发送“roll back”请求，要去所有参与者执行回滚；</li>\n<li>所有的参与者执行【提交】或者【回滚并释放所有事务处理过程中占用的锁资源】。完成后，向协调者发送确认信息；协调者收到所有确认消息后，完成事务。</li>\n</ul>\n<h3 id=\"3-3-缺陷\"><a href=\"#3-3-缺陷\" class=\"headerlink\" title=\"3.3 缺陷\"></a>3.3 缺陷</h3><ol>\n<li>同步阻塞：事务提交过程中，所有参与节点都是阻塞的。这就意味着，当有其他第三方节点访问该节点的资源时，将会处于阻塞状态；</li>\n<li>单点故障：一旦协调者发生故障，则会导致参与者处于阻塞状态。例如，当协调者在提交阶段宕机了，参与者锁定事务资源并会一直等待协调者的请求，导致无法完成事务操作。尽管可以通过选举策略重新选择一个协调者，但是无法解决参与者阻塞的问题；</li>\n<li>数据不一致：由于协调者在发送commit过程中发生故障，或者因为脑裂（局部网络异常，网络分区）导致部分参与者无法接收commit请求，则会使得部分节点收到commit请求并执行，部分节点没收到commit，从而产生数据的不一致性。</li>\n</ol>\n<h2 id=\"4-三阶段提交协议（3PC）\"><a href=\"#4-三阶段提交协议（3PC）\" class=\"headerlink\" title=\"4. 三阶段提交协议（3PC）\"></a>4. 三阶段提交协议（3PC）</h2><p>为了解决2PC中的部分问题，3PC做了一些改进，总体来说就是将2PC中的准备阶段一分为二：CanCommit阶段和PreCommit阶段。另外，3PC中还引入了参与者的超时机制。</p>\n<h3 id=\"4-1-CanCommit阶段\"><a href=\"#4-1-CanCommit阶段\" class=\"headerlink\" title=\"4.1 CanCommit阶段\"></a>4.1 CanCommit阶段</h3><blockquote>\n<p>a. 协调者向所有参与者发送CanCommit请求，询问是否可以执行事务提交，并等待所有参与者的回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，如果判断自身能够完成事务提交，则回复“yes”，否则回复“no”。</p>\n</blockquote>\n<h3 id=\"4-2-PreCommit阶段\"><a href=\"#4-2-PreCommit阶段\" class=\"headerlink\" title=\"4.2 PreCommit阶段\"></a>4.2 PreCommit阶段</h3><p>根据CanCommit阶段的回复，PreCommit阶段有两种情况：<br>1、协调者收到所有参与者回复的“yes”</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送PreCommit请求，并等待回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，执行具体的事务操作（记录undo和redo），此时事务还没有提交；</p>\n</blockquote>\n<blockquote>\n<p>c. 如果参与者中事务执行成功，则返回ACK确认操作，否则返回错误信息。</p>\n</blockquote>\n<p>2、协调者收到的回复中包含“no”或者请求超时</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送abort请求；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到abort请求，或者参与者超时之后也未收到来自协调者的请求，则中断事务。</p>\n</blockquote>\n<h3 id=\"4-3-DoCommit阶段\"><a href=\"#4-3-DoCommit阶段\" class=\"headerlink\" title=\"4.3 DoCommit阶段\"></a>4.3 DoCommit阶段</h3><p>根据PreCommit阶段的回复，DoCommit阶段也有两种情况：<br>1、协调者收到所有参与者的ACK回复</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送DoCommit请求，并等待回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，执行事务的提交操作，执行完成后，向协调者发送ACK确认消息；</p>\n</blockquote>\n<blockquote>\n<p>c. 协调者收到所有来自参与者的ACK消息后，完成事务。</p>\n</blockquote>\n<p>2、协调者没有收到参与者的回复，即等待超时；或者协调者收到的消息不是ACK，而是错误消息</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送abort请求；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到abort请求后，根据之前记录的undo和redo日志，执行事务回滚，并在回滚完成后，释放所有在事务中占用的锁资源；</p>\n</blockquote>\n<blockquote>\n<p>c. 参与者完成回滚及释放资源后，向协调者发送ACK消息；协调者收到所有参与者回复的消息后，中断事务。</p>\n</blockquote>\n<p>注意：如果参与者在超时等待后，既没有收到DoCommit，也没收到abort请求，则会选择继续进行事务提交。因为目前已经处于第三阶段了，有理由相信成功提交的几率更大。</p>\n<p>3PC解决了2PC中的单点故障问题，并减少了阻塞。因为参与者在超时等待后，会自动提交commit操作，而不是一直等待下去。但是3PC也无法解决数据不一致性，例如，当部分参与者收到了abort请求，而另一部分参与者由于网络通信原因没有收到abort请求，自动执行了commit，则会导致数据不一致。</p>\n<h2 id=\"5-Paxos算法\"><a href=\"#5-Paxos算法\" class=\"headerlink\" title=\"5. Paxos算法\"></a>5. Paxos算法</h2><p>Paxos是一种基于消息传递的提高分布式系统容错性的一致性算法。</p>\n<p>背景：</p>\n<blockquote>\n<p>1、参与者（节点）可能会随时宕机或者出现网络分割的情况</p>\n</blockquote>\n<blockquote>\n<p>2、消息传递可能会出现延迟、重复、丢失等可能性，但是其不会被损坏、篡改（没有拜占庭将军的问题）</p>\n</blockquote>\n<p>目的：</p>\n<blockquote>\n<p>在分布式系统中，关于某个数据值达成一致，从而保证分布式系统的数据一致性。</p>\n</blockquote>\n<p>Paxos算法中存在三种角色：提案者（Proposer），接收者（Acceptor），学习者（Learner）。</p>\n<h3 id=\"5-1-Proposer生成提案\"><a href=\"#5-1-Proposer生成提案\" class=\"headerlink\" title=\"5.1 Proposer生成提案\"></a>5.1 Proposer生成提案</h3><blockquote>\n<p>Prepare请求：Proposer提出一个编号为M1的提案，发送给大多数Acceptor，等待回应；</p>\n</blockquote>\n<p>如果Acceptor从未批准过任何提案，则返回数据中关于提案可以为空；否则，返回其批准过的提案中编号最大的提案所对应的编号和Value值；</p>\n<blockquote>\n<p>Accept请求：Proposer接收到了来自半数以上的Acceptor的回复，则其可以生成编号为M1，值为V1的提案了。注意，值V1应该等于所有回复中编号最大的提案对应的value值。如果所有的回复中都无相关[编号，value]数据，则Proposer可自己提出所需要的数据，赋值给V1。</p>\n</blockquote>\n<h3 id=\"5-2-Acceptor接收提案\"><a href=\"#5-2-Acceptor接收提案\" class=\"headerlink\" title=\"5.2 Acceptor接收提案\"></a>5.2 Acceptor接收提案</h3><p>若Acceptor之前没有批准过任何提案，则可以批准刚接收的编号为M1的提案；否则，Acceptor不得批准编号小于之前已经批准的提案中最大的编号（例如，之前已经批准M11，M12，M13，M13编号最大，则接下来的提案中，如果编号小于M13，则不得批准）</p>\n<h3 id=\"5-3-Learner学习提案\"><a href=\"#5-3-Learner学习提案\" class=\"headerlink\" title=\"5.3 Learner学习提案\"></a>5.3 Learner学习提案</h3><p>一旦某个提案M0，V0被大多数Acceptor批准，则认为该提案被“选定”。对于已经被“选定”的提案，对于所有的Learner而言，其是可见的（即可被获取到的）</p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>为了保证数据的高可用性，通常会在不同物理节点上保存多个副本。而为了保证对用户提供统一、正确的增删改查等语义，需要保证不同物理机器上的副本是一致的。</p>\n<h2 id=\"1-分布式事务\"><a href=\"#1-分布式事务\" class=\"headerlink\" title=\"1. 分布式事务\"></a>1. 分布式事务</h2><p>单个节点上的数据操作可以满足ACID，但是相互独立的节点无法知道对方的事务执行情况。如果要保证数据的一致性，就必须对数据写操作要求其能够实现：要么在全部节点执行，要么在全部节点都不执行。","more":"</p>\n<blockquote>\n<p>分布式事务是指会涉及到多个数据库的事务。这种情况下，一个数据库内部操作是否能提交成功，不仅取决于自身，还与全局中其他事务的成功与否相关。为了保证数据的一致性，要求事务产生统一的结果：即全部提交成功或者全部回滚。</p>\n</blockquote>\n<h2 id=\"2-数据一致性模型\"><a href=\"#2-数据一致性模型\" class=\"headerlink\" title=\"2. 数据一致性模型\"></a>2. 数据一致性模型</h2><p>维护数据副本一致性的代价是很高的，因此，为了满足不同场景的要求，系统采用不同的一致性模型，主要分为以下几种：</p>\n<h3 id=\"2-1-强一致性\"><a href=\"#2-1-强一致性\" class=\"headerlink\" title=\"2.1 强一致性\"></a>2.1 强一致性</h3><p>无论更新哪一个数据副本，都要求随后的读操作能获取到最新的数据，即要求“立即保持一致”。比如2PC。</p>\n<h3 id=\"2-2-弱一致性\"><a href=\"#2-2-弱一致性\" class=\"headerlink\" title=\"2.2 弱一致性\"></a>2.2 弱一致性</h3><p>更新数据副本后，要完成所有数据的一致性，需要等待一段时间，这段时间称之为“不一致性窗口”。</p>\n<h3 id=\"2-3-最终一致性\"><a href=\"#2-3-最终一致性\" class=\"headerlink\" title=\"2.3 最终一致性\"></a>2.3 最终一致性</h3><p>是一种特殊形式的弱一致性。不保证任意时刻任意节点上的同一份数据都是一致的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化，即一段时间后节点间的数据会最终达到一致的状态。<br>根据不同的保证，最终一致性又可以划分成以下几种模型：</p>\n<blockquote>\n<p>a)因果一致性：A、B、C三个进程分别独自操作数据，若A更新数据后通知了B，则B在随后的读取中能获取到A更新的数据；但是A没有通知C，因此系统并不一定保证C会获取到A更新的数据值。</p>\n</blockquote>\n<blockquote>\n<p>b)读自写一致性：某用户更新数据后，在随后的读取操作中能获取到其更新的值；但系统并不保证其他用户能读取到最新值。</p>\n</blockquote>\n<blockquote>\n<p>c)会话一致性：将读自写一致性限定在一个会话的范围内。</p>\n</blockquote>\n<blockquote>\n<p>d)单调读一致性：用户读取某个数据值后，在后续的操作中不会读取到该数据更早的版本。</p>\n</blockquote>\n<blockquote>\n<p>e)时间轴一致性：也叫单调写一致性，要求数据的所有副本以相同的顺序执行所有的更新操作。 </p>\n</blockquote>\n<h2 id=\"3-两阶段提交协议（2PC）\"><a href=\"#3-两阶段提交协议（2PC）\" class=\"headerlink\" title=\"3. 两阶段提交协议（2PC）\"></a>3. 两阶段提交协议（2PC）</h2><p>对于分布式事务，如果直接提交请求，部分节点执行成功，部分节点失败，则会出现数据的不一致性。</p>\n<blockquote>\n<p>两阶段提交协议是为了保证分布式事务的数据一致性。为了能够协调并掌握各个节点（称为参与者）的事务执行情况，这里引入一个组件（协调者）。整个2PC分为：准备阶段和提交阶段，准备阶段用于“询问”各个参与者是否能够满足提交，提交阶段则为执行阶段（可能执行提交，也可能执行回滚）</p>\n</blockquote>\n<h3 id=\"3-1-准备阶段\"><a href=\"#3-1-准备阶段\" class=\"headerlink\" title=\"3.1 准备阶段\"></a>3.1 准备阶段</h3><ul>\n<li>协调者向各个参与者发送请求，询问是否可以执行提交，并等待各个参与者的恢复；</li>\n<li>参与者收到协调者发来的询问请求后，执行事务操作（记录redo和undo），但注意此时还并未提交。如果事务操作成功，则参与者向协调者恢复“yes”，否则回复“no”；</li>\n<li>协调者接收到所有参与者的回复，当然也可能存在请求超时的情况。</li>\n</ul>\n<h3 id=\"3-2-提交阶段\"><a href=\"#3-2-提交阶段\" class=\"headerlink\" title=\"3.2 提交阶段\"></a>3.2 提交阶段</h3><ul>\n<li>若所有的参与者都成功执行了事务，切协调者收集到了所有参与者回复的“yes”，则协调者向所有节点发送“commit”请求，要求所有参与者执行提交操作；只要有一个参与者执行失败或者请求超时，则协调者向所有参与者发送“roll back”请求，要去所有参与者执行回滚；</li>\n<li>所有的参与者执行【提交】或者【回滚并释放所有事务处理过程中占用的锁资源】。完成后，向协调者发送确认信息；协调者收到所有确认消息后，完成事务。</li>\n</ul>\n<h3 id=\"3-3-缺陷\"><a href=\"#3-3-缺陷\" class=\"headerlink\" title=\"3.3 缺陷\"></a>3.3 缺陷</h3><ol>\n<li>同步阻塞：事务提交过程中，所有参与节点都是阻塞的。这就意味着，当有其他第三方节点访问该节点的资源时，将会处于阻塞状态；</li>\n<li>单点故障：一旦协调者发生故障，则会导致参与者处于阻塞状态。例如，当协调者在提交阶段宕机了，参与者锁定事务资源并会一直等待协调者的请求，导致无法完成事务操作。尽管可以通过选举策略重新选择一个协调者，但是无法解决参与者阻塞的问题；</li>\n<li>数据不一致：由于协调者在发送commit过程中发生故障，或者因为脑裂（局部网络异常，网络分区）导致部分参与者无法接收commit请求，则会使得部分节点收到commit请求并执行，部分节点没收到commit，从而产生数据的不一致性。</li>\n</ol>\n<h2 id=\"4-三阶段提交协议（3PC）\"><a href=\"#4-三阶段提交协议（3PC）\" class=\"headerlink\" title=\"4. 三阶段提交协议（3PC）\"></a>4. 三阶段提交协议（3PC）</h2><p>为了解决2PC中的部分问题，3PC做了一些改进，总体来说就是将2PC中的准备阶段一分为二：CanCommit阶段和PreCommit阶段。另外，3PC中还引入了参与者的超时机制。</p>\n<h3 id=\"4-1-CanCommit阶段\"><a href=\"#4-1-CanCommit阶段\" class=\"headerlink\" title=\"4.1 CanCommit阶段\"></a>4.1 CanCommit阶段</h3><blockquote>\n<p>a. 协调者向所有参与者发送CanCommit请求，询问是否可以执行事务提交，并等待所有参与者的回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，如果判断自身能够完成事务提交，则回复“yes”，否则回复“no”。</p>\n</blockquote>\n<h3 id=\"4-2-PreCommit阶段\"><a href=\"#4-2-PreCommit阶段\" class=\"headerlink\" title=\"4.2 PreCommit阶段\"></a>4.2 PreCommit阶段</h3><p>根据CanCommit阶段的回复，PreCommit阶段有两种情况：<br>1、协调者收到所有参与者回复的“yes”</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送PreCommit请求，并等待回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，执行具体的事务操作（记录undo和redo），此时事务还没有提交；</p>\n</blockquote>\n<blockquote>\n<p>c. 如果参与者中事务执行成功，则返回ACK确认操作，否则返回错误信息。</p>\n</blockquote>\n<p>2、协调者收到的回复中包含“no”或者请求超时</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送abort请求；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到abort请求，或者参与者超时之后也未收到来自协调者的请求，则中断事务。</p>\n</blockquote>\n<h3 id=\"4-3-DoCommit阶段\"><a href=\"#4-3-DoCommit阶段\" class=\"headerlink\" title=\"4.3 DoCommit阶段\"></a>4.3 DoCommit阶段</h3><p>根据PreCommit阶段的回复，DoCommit阶段也有两种情况：<br>1、协调者收到所有参与者的ACK回复</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送DoCommit请求，并等待回复；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到请求后，执行事务的提交操作，执行完成后，向协调者发送ACK确认消息；</p>\n</blockquote>\n<blockquote>\n<p>c. 协调者收到所有来自参与者的ACK消息后，完成事务。</p>\n</blockquote>\n<p>2、协调者没有收到参与者的回复，即等待超时；或者协调者收到的消息不是ACK，而是错误消息</p>\n<blockquote>\n<p>a. 协调者向所有参与者发送abort请求；</p>\n</blockquote>\n<blockquote>\n<p>b. 参与者收到abort请求后，根据之前记录的undo和redo日志，执行事务回滚，并在回滚完成后，释放所有在事务中占用的锁资源；</p>\n</blockquote>\n<blockquote>\n<p>c. 参与者完成回滚及释放资源后，向协调者发送ACK消息；协调者收到所有参与者回复的消息后，中断事务。</p>\n</blockquote>\n<p>注意：如果参与者在超时等待后，既没有收到DoCommit，也没收到abort请求，则会选择继续进行事务提交。因为目前已经处于第三阶段了，有理由相信成功提交的几率更大。</p>\n<p>3PC解决了2PC中的单点故障问题，并减少了阻塞。因为参与者在超时等待后，会自动提交commit操作，而不是一直等待下去。但是3PC也无法解决数据不一致性，例如，当部分参与者收到了abort请求，而另一部分参与者由于网络通信原因没有收到abort请求，自动执行了commit，则会导致数据不一致。</p>\n<h2 id=\"5-Paxos算法\"><a href=\"#5-Paxos算法\" class=\"headerlink\" title=\"5. Paxos算法\"></a>5. Paxos算法</h2><p>Paxos是一种基于消息传递的提高分布式系统容错性的一致性算法。</p>\n<p>背景：</p>\n<blockquote>\n<p>1、参与者（节点）可能会随时宕机或者出现网络分割的情况</p>\n</blockquote>\n<blockquote>\n<p>2、消息传递可能会出现延迟、重复、丢失等可能性，但是其不会被损坏、篡改（没有拜占庭将军的问题）</p>\n</blockquote>\n<p>目的：</p>\n<blockquote>\n<p>在分布式系统中，关于某个数据值达成一致，从而保证分布式系统的数据一致性。</p>\n</blockquote>\n<p>Paxos算法中存在三种角色：提案者（Proposer），接收者（Acceptor），学习者（Learner）。</p>\n<h3 id=\"5-1-Proposer生成提案\"><a href=\"#5-1-Proposer生成提案\" class=\"headerlink\" title=\"5.1 Proposer生成提案\"></a>5.1 Proposer生成提案</h3><blockquote>\n<p>Prepare请求：Proposer提出一个编号为M1的提案，发送给大多数Acceptor，等待回应；</p>\n</blockquote>\n<p>如果Acceptor从未批准过任何提案，则返回数据中关于提案可以为空；否则，返回其批准过的提案中编号最大的提案所对应的编号和Value值；</p>\n<blockquote>\n<p>Accept请求：Proposer接收到了来自半数以上的Acceptor的回复，则其可以生成编号为M1，值为V1的提案了。注意，值V1应该等于所有回复中编号最大的提案对应的value值。如果所有的回复中都无相关[编号，value]数据，则Proposer可自己提出所需要的数据，赋值给V1。</p>\n</blockquote>\n<h3 id=\"5-2-Acceptor接收提案\"><a href=\"#5-2-Acceptor接收提案\" class=\"headerlink\" title=\"5.2 Acceptor接收提案\"></a>5.2 Acceptor接收提案</h3><p>若Acceptor之前没有批准过任何提案，则可以批准刚接收的编号为M1的提案；否则，Acceptor不得批准编号小于之前已经批准的提案中最大的编号（例如，之前已经批准M11，M12，M13，M13编号最大，则接下来的提案中，如果编号小于M13，则不得批准）</p>\n<h3 id=\"5-3-Learner学习提案\"><a href=\"#5-3-Learner学习提案\" class=\"headerlink\" title=\"5.3 Learner学习提案\"></a>5.3 Learner学习提案</h3><p>一旦某个提案M0，V0被大多数Acceptor批准，则认为该提案被“选定”。对于已经被“选定”的提案，对于所有的Learner而言，其是可见的（即可被获取到的）</p>"},{"title":"分布式文件系统","date":"2018-01-22T07:12:06.000Z","_content":"分布式文件系统的主要功能有两个：\n一，存储文档、图像、视频等Blob（Binary large object）类型数据；二，作为分布式表格系统的持久化层\n\n分布式文件系统中，最著名的是Google的GFS和Hadoop的HDFS，因此下文中主要以这二者为例，采用QA的方式。<!--more-->\n\n## 1.GFS整体结构是怎样，其中角色各自承担的任务？\nGFS（HDFS的整体结构和GFS几乎一致）主要有以下三种角色：\n>a) Master（主控服务器）：负责维护系统的元数据，包括文件及数据块命名空间、文件到数据块的映射（一个文件可能会被切割成多个数据块，当读取某一文件时，需要知道文件由哪些数据块组成）、数据块位置信息等；同时也负责系统的全局控制，如数据块回收、数据块复制等；另外，也负责与数据块服务器的心跳等。\n\nMaster在对文件划分为数据块时，会为每个数据块创建一个64位全局唯一的句柄。\n\n>b) ChunkServer（数据块服务器）：主要用于存储数据块，以Linux文件的形式将数据块存储在磁盘中\n\nChunkServer会对存储的数据维持校验和。\n\n\n>c) Client（客户端）：提供给应用程序访问接口。\n\nGFS Client不缓存文件数据，只缓存主控服务器中获取的元数据。\n\n## 2.GFS和HDFS的数据块为什么划分成64M？\n64M的数据块，确实远远大于一般的文件系统的数据块大小，但是选择一个大的数据块，能提供很多好处：\n>a) 减少了Client与Master的交互：在同一个数据块内的读写操作只需要client在开始阶段询问master一次关于数据块位置信息即可，尤其是对于顺序读写超大文件，效果非常显著。\n\n>b) 减小网络负载：使用一个大的数据块，client可以在一个数据块上完成更多的操作，它可以通过维持一个到数据块服务器的TCP长连接，减少网络管理量。\n\n>c) 减少元数据的存储：数据块越大，对于同一个文件而言，其需要保存的元数据就越少。这样，当元数据较少时，我们可以将其存储在内存里，可以带来其他好处。\n\n>缺陷：文件较小时，其会被保存在一个数据块里。这样，当大量对该文件的请求到来时，很容易出现热点问题（系统局部过载）。当然，对于该问题，可以采用增加冗余份数等策略。\n\n## 3.HDFS如何删除多余副本数据？\n如果系统的设置是标准的3副本策略，但发生某些情况后，系统中的A数据副本变成了5份，那么系统需要对多余的2份数据进行清除动作。\n\n[1] 哪些情况会导致系统中产生多余的副本？\n>a) 节点重新上线：如果一个数据块节点下线，会导致大批量的数据块丢失，而这些数据块就会在整个系统中进行重新拷贝。但是，一旦下线的节点取消下线，则之前已经拷贝生成的数据必然会成为多余的数据副本；\n\n>b) 副本数重新设置：如果系统当前的副本数设置为3，那么A数据就会存在3份副本；当某一用户通过API设置副本数为1时，则系统中A副本就会多出2份；\n\n>c) 新添加的数据块记录丢失\n\n[2] 如何处理多余的副本？\n\n* 定位多余的副本\n\n>对于数据副本块，找到其所在的节点列表；\n\n>对于该数据块的节点列表，划分为2类：节点上拥有超过1个副本和节点上恰好只有1个副本。优先选择节点中多于1个副本的节点进行多于副本删除；（例如X1节点有2个副本，X2节点有2个副本，X3节点有1个副本，则肯定先选择X1或者X2节点进行多于副本删除）\n\n>对于节点上副本数相同的，则优先选取可用空间少的节点。(例如X1节点有1个副本(10G可用空间)，X2节点有1个副本（100G可用空间），X3节点有1个副本（2G可用空间），X4节点有1个副本（23G可用空间），则肯定先选择X3节点进行多于副本删除，因为删除后可以释放出更多的可用空间)\n\n>将挑选出的节点从候选节点列表中删除\n\n* 处理多余的副本\n\n>已经获取到需要删除的副本和其对应所在的节点信息，只需要将其加入到无效数据块列表后，不久该数据块将会被清除","source":"_posts/分布式文件系统.md","raw":"---\ntitle: 分布式文件系统\ndate: 2018-01-22 15:12:06\ntags:\n\t- 分布式\n---\n分布式文件系统的主要功能有两个：\n一，存储文档、图像、视频等Blob（Binary large object）类型数据；二，作为分布式表格系统的持久化层\n\n分布式文件系统中，最著名的是Google的GFS和Hadoop的HDFS，因此下文中主要以这二者为例，采用QA的方式。<!--more-->\n\n## 1.GFS整体结构是怎样，其中角色各自承担的任务？\nGFS（HDFS的整体结构和GFS几乎一致）主要有以下三种角色：\n>a) Master（主控服务器）：负责维护系统的元数据，包括文件及数据块命名空间、文件到数据块的映射（一个文件可能会被切割成多个数据块，当读取某一文件时，需要知道文件由哪些数据块组成）、数据块位置信息等；同时也负责系统的全局控制，如数据块回收、数据块复制等；另外，也负责与数据块服务器的心跳等。\n\nMaster在对文件划分为数据块时，会为每个数据块创建一个64位全局唯一的句柄。\n\n>b) ChunkServer（数据块服务器）：主要用于存储数据块，以Linux文件的形式将数据块存储在磁盘中\n\nChunkServer会对存储的数据维持校验和。\n\n\n>c) Client（客户端）：提供给应用程序访问接口。\n\nGFS Client不缓存文件数据，只缓存主控服务器中获取的元数据。\n\n## 2.GFS和HDFS的数据块为什么划分成64M？\n64M的数据块，确实远远大于一般的文件系统的数据块大小，但是选择一个大的数据块，能提供很多好处：\n>a) 减少了Client与Master的交互：在同一个数据块内的读写操作只需要client在开始阶段询问master一次关于数据块位置信息即可，尤其是对于顺序读写超大文件，效果非常显著。\n\n>b) 减小网络负载：使用一个大的数据块，client可以在一个数据块上完成更多的操作，它可以通过维持一个到数据块服务器的TCP长连接，减少网络管理量。\n\n>c) 减少元数据的存储：数据块越大，对于同一个文件而言，其需要保存的元数据就越少。这样，当元数据较少时，我们可以将其存储在内存里，可以带来其他好处。\n\n>缺陷：文件较小时，其会被保存在一个数据块里。这样，当大量对该文件的请求到来时，很容易出现热点问题（系统局部过载）。当然，对于该问题，可以采用增加冗余份数等策略。\n\n## 3.HDFS如何删除多余副本数据？\n如果系统的设置是标准的3副本策略，但发生某些情况后，系统中的A数据副本变成了5份，那么系统需要对多余的2份数据进行清除动作。\n\n[1] 哪些情况会导致系统中产生多余的副本？\n>a) 节点重新上线：如果一个数据块节点下线，会导致大批量的数据块丢失，而这些数据块就会在整个系统中进行重新拷贝。但是，一旦下线的节点取消下线，则之前已经拷贝生成的数据必然会成为多余的数据副本；\n\n>b) 副本数重新设置：如果系统当前的副本数设置为3，那么A数据就会存在3份副本；当某一用户通过API设置副本数为1时，则系统中A副本就会多出2份；\n\n>c) 新添加的数据块记录丢失\n\n[2] 如何处理多余的副本？\n\n* 定位多余的副本\n\n>对于数据副本块，找到其所在的节点列表；\n\n>对于该数据块的节点列表，划分为2类：节点上拥有超过1个副本和节点上恰好只有1个副本。优先选择节点中多于1个副本的节点进行多于副本删除；（例如X1节点有2个副本，X2节点有2个副本，X3节点有1个副本，则肯定先选择X1或者X2节点进行多于副本删除）\n\n>对于节点上副本数相同的，则优先选取可用空间少的节点。(例如X1节点有1个副本(10G可用空间)，X2节点有1个副本（100G可用空间），X3节点有1个副本（2G可用空间），X4节点有1个副本（23G可用空间），则肯定先选择X3节点进行多于副本删除，因为删除后可以释放出更多的可用空间)\n\n>将挑选出的节点从候选节点列表中删除\n\n* 处理多余的副本\n\n>已经获取到需要删除的副本和其对应所在的节点信息，只需要将其加入到无效数据块列表后，不久该数据块将会被清除","slug":"分布式文件系统","published":1,"updated":"2021-08-21T14:25:29.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r8000b2j4yb4pmeopo","content":"<p>分布式文件系统的主要功能有两个：<br>一，存储文档、图像、视频等Blob（Binary large object）类型数据；二，作为分布式表格系统的持久化层</p>\n<p>分布式文件系统中，最著名的是Google的GFS和Hadoop的HDFS，因此下文中主要以这二者为例，采用QA的方式。<span id=\"more\"></span></p>\n<h2 id=\"1-GFS整体结构是怎样，其中角色各自承担的任务？\"><a href=\"#1-GFS整体结构是怎样，其中角色各自承担的任务？\" class=\"headerlink\" title=\"1.GFS整体结构是怎样，其中角色各自承担的任务？\"></a>1.GFS整体结构是怎样，其中角色各自承担的任务？</h2><p>GFS（HDFS的整体结构和GFS几乎一致）主要有以下三种角色：</p>\n<blockquote>\n<p>a) Master（主控服务器）：负责维护系统的元数据，包括文件及数据块命名空间、文件到数据块的映射（一个文件可能会被切割成多个数据块，当读取某一文件时，需要知道文件由哪些数据块组成）、数据块位置信息等；同时也负责系统的全局控制，如数据块回收、数据块复制等；另外，也负责与数据块服务器的心跳等。</p>\n</blockquote>\n<p>Master在对文件划分为数据块时，会为每个数据块创建一个64位全局唯一的句柄。</p>\n<blockquote>\n<p>b) ChunkServer（数据块服务器）：主要用于存储数据块，以Linux文件的形式将数据块存储在磁盘中</p>\n</blockquote>\n<p>ChunkServer会对存储的数据维持校验和。</p>\n<blockquote>\n<p>c) Client（客户端）：提供给应用程序访问接口。</p>\n</blockquote>\n<p>GFS Client不缓存文件数据，只缓存主控服务器中获取的元数据。</p>\n<h2 id=\"2-GFS和HDFS的数据块为什么划分成64M？\"><a href=\"#2-GFS和HDFS的数据块为什么划分成64M？\" class=\"headerlink\" title=\"2.GFS和HDFS的数据块为什么划分成64M？\"></a>2.GFS和HDFS的数据块为什么划分成64M？</h2><p>64M的数据块，确实远远大于一般的文件系统的数据块大小，但是选择一个大的数据块，能提供很多好处：</p>\n<blockquote>\n<p>a) 减少了Client与Master的交互：在同一个数据块内的读写操作只需要client在开始阶段询问master一次关于数据块位置信息即可，尤其是对于顺序读写超大文件，效果非常显著。</p>\n</blockquote>\n<blockquote>\n<p>b) 减小网络负载：使用一个大的数据块，client可以在一个数据块上完成更多的操作，它可以通过维持一个到数据块服务器的TCP长连接，减少网络管理量。</p>\n</blockquote>\n<blockquote>\n<p>c) 减少元数据的存储：数据块越大，对于同一个文件而言，其需要保存的元数据就越少。这样，当元数据较少时，我们可以将其存储在内存里，可以带来其他好处。</p>\n</blockquote>\n<blockquote>\n<p>缺陷：文件较小时，其会被保存在一个数据块里。这样，当大量对该文件的请求到来时，很容易出现热点问题（系统局部过载）。当然，对于该问题，可以采用增加冗余份数等策略。</p>\n</blockquote>\n<h2 id=\"3-HDFS如何删除多余副本数据？\"><a href=\"#3-HDFS如何删除多余副本数据？\" class=\"headerlink\" title=\"3.HDFS如何删除多余副本数据？\"></a>3.HDFS如何删除多余副本数据？</h2><p>如果系统的设置是标准的3副本策略，但发生某些情况后，系统中的A数据副本变成了5份，那么系统需要对多余的2份数据进行清除动作。</p>\n<p>[1] 哪些情况会导致系统中产生多余的副本？</p>\n<blockquote>\n<p>a) 节点重新上线：如果一个数据块节点下线，会导致大批量的数据块丢失，而这些数据块就会在整个系统中进行重新拷贝。但是，一旦下线的节点取消下线，则之前已经拷贝生成的数据必然会成为多余的数据副本；</p>\n</blockquote>\n<blockquote>\n<p>b) 副本数重新设置：如果系统当前的副本数设置为3，那么A数据就会存在3份副本；当某一用户通过API设置副本数为1时，则系统中A副本就会多出2份；</p>\n</blockquote>\n<blockquote>\n<p>c) 新添加的数据块记录丢失</p>\n</blockquote>\n<p>[2] 如何处理多余的副本？</p>\n<ul>\n<li>定位多余的副本</li>\n</ul>\n<blockquote>\n<p>对于数据副本块，找到其所在的节点列表；</p>\n</blockquote>\n<blockquote>\n<p>对于该数据块的节点列表，划分为2类：节点上拥有超过1个副本和节点上恰好只有1个副本。优先选择节点中多于1个副本的节点进行多于副本删除；（例如X1节点有2个副本，X2节点有2个副本，X3节点有1个副本，则肯定先选择X1或者X2节点进行多于副本删除）</p>\n</blockquote>\n<blockquote>\n<p>对于节点上副本数相同的，则优先选取可用空间少的节点。(例如X1节点有1个副本(10G可用空间)，X2节点有1个副本（100G可用空间），X3节点有1个副本（2G可用空间），X4节点有1个副本（23G可用空间），则肯定先选择X3节点进行多于副本删除，因为删除后可以释放出更多的可用空间)</p>\n</blockquote>\n<blockquote>\n<p>将挑选出的节点从候选节点列表中删除</p>\n</blockquote>\n<ul>\n<li>处理多余的副本</li>\n</ul>\n<blockquote>\n<p>已经获取到需要删除的副本和其对应所在的节点信息，只需要将其加入到无效数据块列表后，不久该数据块将会被清除</p>\n</blockquote>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>分布式文件系统的主要功能有两个：<br>一，存储文档、图像、视频等Blob（Binary large object）类型数据；二，作为分布式表格系统的持久化层</p>\n<p>分布式文件系统中，最著名的是Google的GFS和Hadoop的HDFS，因此下文中主要以这二者为例，采用QA的方式。","more":"</p>\n<h2 id=\"1-GFS整体结构是怎样，其中角色各自承担的任务？\"><a href=\"#1-GFS整体结构是怎样，其中角色各自承担的任务？\" class=\"headerlink\" title=\"1.GFS整体结构是怎样，其中角色各自承担的任务？\"></a>1.GFS整体结构是怎样，其中角色各自承担的任务？</h2><p>GFS（HDFS的整体结构和GFS几乎一致）主要有以下三种角色：</p>\n<blockquote>\n<p>a) Master（主控服务器）：负责维护系统的元数据，包括文件及数据块命名空间、文件到数据块的映射（一个文件可能会被切割成多个数据块，当读取某一文件时，需要知道文件由哪些数据块组成）、数据块位置信息等；同时也负责系统的全局控制，如数据块回收、数据块复制等；另外，也负责与数据块服务器的心跳等。</p>\n</blockquote>\n<p>Master在对文件划分为数据块时，会为每个数据块创建一个64位全局唯一的句柄。</p>\n<blockquote>\n<p>b) ChunkServer（数据块服务器）：主要用于存储数据块，以Linux文件的形式将数据块存储在磁盘中</p>\n</blockquote>\n<p>ChunkServer会对存储的数据维持校验和。</p>\n<blockquote>\n<p>c) Client（客户端）：提供给应用程序访问接口。</p>\n</blockquote>\n<p>GFS Client不缓存文件数据，只缓存主控服务器中获取的元数据。</p>\n<h2 id=\"2-GFS和HDFS的数据块为什么划分成64M？\"><a href=\"#2-GFS和HDFS的数据块为什么划分成64M？\" class=\"headerlink\" title=\"2.GFS和HDFS的数据块为什么划分成64M？\"></a>2.GFS和HDFS的数据块为什么划分成64M？</h2><p>64M的数据块，确实远远大于一般的文件系统的数据块大小，但是选择一个大的数据块，能提供很多好处：</p>\n<blockquote>\n<p>a) 减少了Client与Master的交互：在同一个数据块内的读写操作只需要client在开始阶段询问master一次关于数据块位置信息即可，尤其是对于顺序读写超大文件，效果非常显著。</p>\n</blockquote>\n<blockquote>\n<p>b) 减小网络负载：使用一个大的数据块，client可以在一个数据块上完成更多的操作，它可以通过维持一个到数据块服务器的TCP长连接，减少网络管理量。</p>\n</blockquote>\n<blockquote>\n<p>c) 减少元数据的存储：数据块越大，对于同一个文件而言，其需要保存的元数据就越少。这样，当元数据较少时，我们可以将其存储在内存里，可以带来其他好处。</p>\n</blockquote>\n<blockquote>\n<p>缺陷：文件较小时，其会被保存在一个数据块里。这样，当大量对该文件的请求到来时，很容易出现热点问题（系统局部过载）。当然，对于该问题，可以采用增加冗余份数等策略。</p>\n</blockquote>\n<h2 id=\"3-HDFS如何删除多余副本数据？\"><a href=\"#3-HDFS如何删除多余副本数据？\" class=\"headerlink\" title=\"3.HDFS如何删除多余副本数据？\"></a>3.HDFS如何删除多余副本数据？</h2><p>如果系统的设置是标准的3副本策略，但发生某些情况后，系统中的A数据副本变成了5份，那么系统需要对多余的2份数据进行清除动作。</p>\n<p>[1] 哪些情况会导致系统中产生多余的副本？</p>\n<blockquote>\n<p>a) 节点重新上线：如果一个数据块节点下线，会导致大批量的数据块丢失，而这些数据块就会在整个系统中进行重新拷贝。但是，一旦下线的节点取消下线，则之前已经拷贝生成的数据必然会成为多余的数据副本；</p>\n</blockquote>\n<blockquote>\n<p>b) 副本数重新设置：如果系统当前的副本数设置为3，那么A数据就会存在3份副本；当某一用户通过API设置副本数为1时，则系统中A副本就会多出2份；</p>\n</blockquote>\n<blockquote>\n<p>c) 新添加的数据块记录丢失</p>\n</blockquote>\n<p>[2] 如何处理多余的副本？</p>\n<ul>\n<li>定位多余的副本</li>\n</ul>\n<blockquote>\n<p>对于数据副本块，找到其所在的节点列表；</p>\n</blockquote>\n<blockquote>\n<p>对于该数据块的节点列表，划分为2类：节点上拥有超过1个副本和节点上恰好只有1个副本。优先选择节点中多于1个副本的节点进行多于副本删除；（例如X1节点有2个副本，X2节点有2个副本，X3节点有1个副本，则肯定先选择X1或者X2节点进行多于副本删除）</p>\n</blockquote>\n<blockquote>\n<p>对于节点上副本数相同的，则优先选取可用空间少的节点。(例如X1节点有1个副本(10G可用空间)，X2节点有1个副本（100G可用空间），X3节点有1个副本（2G可用空间），X4节点有1个副本（23G可用空间），则肯定先选择X3节点进行多于副本删除，因为删除后可以释放出更多的可用空间)</p>\n</blockquote>\n<blockquote>\n<p>将挑选出的节点从候选节点列表中删除</p>\n</blockquote>\n<ul>\n<li>处理多余的副本</li>\n</ul>\n<blockquote>\n<p>已经获取到需要删除的副本和其对应所在的节点信息，只需要将其加入到无效数据块列表后，不久该数据块将会被清除</p>\n</blockquote>"},{"title":"并发与并行","date":"2017-10-24T00:58:03.000Z","_content":"并发是指两个或多个事件在**同一时间间隔**发生；并行是指两个或多个事件在**同一时刻**发生。\n\n并发是在**同一实体**（比如CPU的一个核）上的多个事件；并行是在**不同实体**（比如CPU的多个核）上的多个事件。\n\n并发的关键是有处理多个任务的能力，但不一定要同时；并行的关键是有同时处理多个任务的能力。<!--more-->\n\n举个简单的例子，小明要练习书法，规定了每天下午1点到3点进行练习，且1点到2点练习硬笔书法，2点到3点练习软笔书法（并发）。但是为了提高练习效率，充分利用时间，小明决定同时练习硬笔和软笔，具体做法就是左手练习硬笔书法，右手练习软笔书法（并行）。小明真是天赋过人啊....（例子差强人意，意思体会了就行）\n\n尽管了解了并发和并行的区别，但有时候会混淆并发和并行分别对应的概念。于我而言，我记忆的方式为：将“并行”理解为“两个人并排一起走路”，对应到计算机领域，则可认为是“两个CPU内核在同时运行”。\n","source":"_posts/并发与并行.md","raw":"---\ntitle: 并发与并行\ndate: 2017-10-24 08:58:03\ntags:\n\t- 概念混淆\n---\n并发是指两个或多个事件在**同一时间间隔**发生；并行是指两个或多个事件在**同一时刻**发生。\n\n并发是在**同一实体**（比如CPU的一个核）上的多个事件；并行是在**不同实体**（比如CPU的多个核）上的多个事件。\n\n并发的关键是有处理多个任务的能力，但不一定要同时；并行的关键是有同时处理多个任务的能力。<!--more-->\n\n举个简单的例子，小明要练习书法，规定了每天下午1点到3点进行练习，且1点到2点练习硬笔书法，2点到3点练习软笔书法（并发）。但是为了提高练习效率，充分利用时间，小明决定同时练习硬笔和软笔，具体做法就是左手练习硬笔书法，右手练习软笔书法（并行）。小明真是天赋过人啊....（例子差强人意，意思体会了就行）\n\n尽管了解了并发和并行的区别，但有时候会混淆并发和并行分别对应的概念。于我而言，我记忆的方式为：将“并行”理解为“两个人并排一起走路”，对应到计算机领域，则可认为是“两个CPU内核在同时运行”。\n","slug":"并发与并行","published":1,"updated":"2021-08-21T14:25:29.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5r9000d2j4y7musfoe8","content":"<p>并发是指两个或多个事件在<strong>同一时间间隔</strong>发生；并行是指两个或多个事件在<strong>同一时刻</strong>发生。</p>\n<p>并发是在<strong>同一实体</strong>（比如CPU的一个核）上的多个事件；并行是在<strong>不同实体</strong>（比如CPU的多个核）上的多个事件。</p>\n<p>并发的关键是有处理多个任务的能力，但不一定要同时；并行的关键是有同时处理多个任务的能力。<span id=\"more\"></span></p>\n<p>举个简单的例子，小明要练习书法，规定了每天下午1点到3点进行练习，且1点到2点练习硬笔书法，2点到3点练习软笔书法（并发）。但是为了提高练习效率，充分利用时间，小明决定同时练习硬笔和软笔，具体做法就是左手练习硬笔书法，右手练习软笔书法（并行）。小明真是天赋过人啊….（例子差强人意，意思体会了就行）</p>\n<p>尽管了解了并发和并行的区别，但有时候会混淆并发和并行分别对应的概念。于我而言，我记忆的方式为：将“并行”理解为“两个人并排一起走路”，对应到计算机领域，则可认为是“两个CPU内核在同时运行”。</p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>并发是指两个或多个事件在<strong>同一时间间隔</strong>发生；并行是指两个或多个事件在<strong>同一时刻</strong>发生。</p>\n<p>并发是在<strong>同一实体</strong>（比如CPU的一个核）上的多个事件；并行是在<strong>不同实体</strong>（比如CPU的多个核）上的多个事件。</p>\n<p>并发的关键是有处理多个任务的能力，但不一定要同时；并行的关键是有同时处理多个任务的能力。","more":"</p>\n<p>举个简单的例子，小明要练习书法，规定了每天下午1点到3点进行练习，且1点到2点练习硬笔书法，2点到3点练习软笔书法（并发）。但是为了提高练习效率，充分利用时间，小明决定同时练习硬笔和软笔，具体做法就是左手练习硬笔书法，右手练习软笔书法（并行）。小明真是天赋过人啊….（例子差强人意，意思体会了就行）</p>\n<p>尽管了解了并发和并行的区别，但有时候会混淆并发和并行分别对应的概念。于我而言，我记忆的方式为：将“并行”理解为“两个人并排一起走路”，对应到计算机领域，则可认为是“两个CPU内核在同时运行”。</p>"},{"title":"1 - HBase源码分析-基本情况","date":"2017-10-28T03:21:05.000Z","_content":"\n从本节起，将开启HBase的源码分析系列，分析的内容主要包括但不限于以下：\n<!--more-->\n> \n查询数据流程\n插入数据流程\n扫描数据流程\n删除数据流程Zookeeper启动过程\nHMaster代码结构\nHRegionServer代码结构\nHMaster启动过程\nRegionServer启动过程\nHMaster与RegionServer通信过程\nCompact/Split过程\nLSM数据模型\nHFile格式\nHLog格式\nWAL\nLock (RowLock)\nFilter实例，作用范围\nFilter集合，对应类\n以及一些设计模式或者其他亮点\n\n分析的HBase源码为[github下载][1]，主要针对HBase client、server、common、protocol、replication等直接相关的代码进行分析，其他对第三方的集成支持的代码则先不考虑。\n\n\n  [1]: https://github.com/apache/hbase/","source":"_posts/1-HBase源码分析-基本情况.md","raw":"---\ntitle: 1 - HBase源码分析-基本情况\ndate: 2017-10-28 11:21:05\ntags:\n    - HBase\n    - Hbase源码分析系列\n---\n\n从本节起，将开启HBase的源码分析系列，分析的内容主要包括但不限于以下：\n<!--more-->\n> \n查询数据流程\n插入数据流程\n扫描数据流程\n删除数据流程Zookeeper启动过程\nHMaster代码结构\nHRegionServer代码结构\nHMaster启动过程\nRegionServer启动过程\nHMaster与RegionServer通信过程\nCompact/Split过程\nLSM数据模型\nHFile格式\nHLog格式\nWAL\nLock (RowLock)\nFilter实例，作用范围\nFilter集合，对应类\n以及一些设计模式或者其他亮点\n\n分析的HBase源码为[github下载][1]，主要针对HBase client、server、common、protocol、replication等直接相关的代码进行分析，其他对第三方的集成支持的代码则先不考虑。\n\n\n  [1]: https://github.com/apache/hbase/","slug":"1-HBase源码分析-基本情况","published":1,"updated":"2021-08-21T14:25:29.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckslvk5ra000g2j4y3llb529f","content":"<p>从本节起，将开启HBase的源码分析系列，分析的内容主要包括但不限于以下：</p>\n<span id=\"more\"></span>\n<blockquote>\n</blockquote>\n<p>查询数据流程<br>插入数据流程<br>扫描数据流程<br>删除数据流程Zookeeper启动过程<br>HMaster代码结构<br>HRegionServer代码结构<br>HMaster启动过程<br>RegionServer启动过程<br>HMaster与RegionServer通信过程<br>Compact/Split过程<br>LSM数据模型<br>HFile格式<br>HLog格式<br>WAL<br>Lock (RowLock)<br>Filter实例，作用范围<br>Filter集合，对应类<br>以及一些设计模式或者其他亮点</p>\n<p>分析的HBase源码为<a href=\"https://github.com/apache/hbase/\">github下载</a>，主要针对HBase client、server、common、protocol、replication等直接相关的代码进行分析，其他对第三方的集成支持的代码则先不考虑。</p>\n","site":{"data":{"next":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","language":null,"timezone":null,"url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"line_number":true,"auto_detect":false,"tab_replace":null},"index_generator":{"path":"","per_page":10,"order_by":"-date"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":10,"pagination_dir":"page","theme":"next","deploy":{"type":null},"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","archives":"/archives/","tags":"/tags/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive","sitemap":"sitemap","commonweal":"heartbeat"},"scheme":"Muse","social_icons":{"enable":true,"icons_only":false,"transition":false,"GitHub":"github","E-Mail":"envelope","Google":"google","Twitter":"twitter","FB Page":"facebook","VK Group":"vk","Skype":"skype","YouTube":"youtube","Instagram":"instagram","StackOverflow":"stack-overflow","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"sidebar":{"position":"left","display":"post","offset":12,"offset_float":12,"b2t":false,"scrollpercent":false,"onmobile":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"mobile_layout_economy":false,"android_chrome_color":"#222","custom_logo":{"enabled":false,"image":null},"highlight_theme":"normal","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":null,"app_key":null},"busuanzi_count":{"enable":false,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"baidu_push":false,"calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"note":{"style":"simple","icons":false,"border_radius":3,"light_bg_offset":0},"label":true,"tabs":{"enable":true,"transition":{"tabs":false,"labels":true},"border_radius":0},"use_motion":true,"fancybox":true,"pace":false,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"lib","jquery":null,"fancybox":null,"fancybox_css":null,"fastclick":null,"lazyload":null,"velocity":null,"velocity_ui":null,"ua_parser":null,"fontawesome":null,"algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.2"}}},"excerpt":"<p>从本节起，将开启HBase的源码分析系列，分析的内容主要包括但不限于以下：</p>","more":"<blockquote>\n</blockquote>\n<p>查询数据流程<br>插入数据流程<br>扫描数据流程<br>删除数据流程Zookeeper启动过程<br>HMaster代码结构<br>HRegionServer代码结构<br>HMaster启动过程<br>RegionServer启动过程<br>HMaster与RegionServer通信过程<br>Compact/Split过程<br>LSM数据模型<br>HFile格式<br>HLog格式<br>WAL<br>Lock (RowLock)<br>Filter实例，作用范围<br>Filter集合，对应类<br>以及一些设计模式或者其他亮点</p>\n<p>分析的HBase源码为<a href=\"https://github.com/apache/hbase/\">github下载</a>，主要针对HBase client、server、common、protocol、replication等直接相关的代码进行分析，其他对第三方的集成支持的代码则先不考虑。</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckslvk5r200042j4y10b0dax6","tag_id":"ckslvk5qz00022j4ydtfk40pn","_id":"ckslvk5r400072j4y4hjaa4t8"},{"post_id":"ckslvk5qp00002j4y16d05zdo","tag_id":"ckslvk5qz00022j4ydtfk40pn","_id":"ckslvk5r9000c2j4y4g9087vf"},{"post_id":"ckslvk5qp00002j4y16d05zdo","tag_id":"ckslvk5r400062j4y0ldy7mmr","_id":"ckslvk5ra000e2j4y2oux8jwv"},{"post_id":"ckslvk5r100032j4y6b7m7lgi","tag_id":"ckslvk5qz00022j4ydtfk40pn","_id":"ckslvk5rb000h2j4y4wkuflp3"},{"post_id":"ckslvk5ra000g2j4y3llb529f","tag_id":"ckslvk5qz00022j4ydtfk40pn","_id":"ckslvk5rc000j2j4y7hev56qk"},{"post_id":"ckslvk5ra000g2j4y3llb529f","tag_id":"ckslvk5r400062j4y0ldy7mmr","_id":"ckslvk5rc000k2j4y0phydb5i"},{"post_id":"ckslvk5r300052j4y8lr30x84","tag_id":"ckslvk5ra000f2j4ydo8f2msz","_id":"ckslvk5rc000l2j4y5djd8c7g"},{"post_id":"ckslvk5r400082j4yak9o4b1g","tag_id":"ckslvk5rc000i2j4yen86bib8","_id":"ckslvk5rd000n2j4y9m3u4d4u"},{"post_id":"ckslvk5r500092j4y6s6yb2ju","tag_id":"ckslvk5rc000m2j4y34yo3hx4","_id":"ckslvk5rd000p2j4yfbonebi7"},{"post_id":"ckslvk5r8000b2j4yb4pmeopo","tag_id":"ckslvk5rc000m2j4y34yo3hx4","_id":"ckslvk5re000r2j4y0abo28gn"},{"post_id":"ckslvk5r9000d2j4y7musfoe8","tag_id":"ckslvk5ra000f2j4ydo8f2msz","_id":"ckslvk5re000s2j4yd48c8dwm"}],"Tag":[{"name":"HBase","_id":"ckslvk5qz00022j4ydtfk40pn"},{"name":"Hbase源码分析系列","_id":"ckslvk5r400062j4y0ldy7mmr"},{"name":"概念混淆","_id":"ckslvk5ra000f2j4ydo8f2msz"},{"name":"编程基础","_id":"ckslvk5rc000i2j4yen86bib8"},{"name":"分布式","_id":"ckslvk5rc000m2j4y34yo3hx4"}]}}